Receive Combining
=================
For receivers with multiple antennas, the output of each received path have to be combined to extract the transmitted
information correctly. In 5G, mostly 2 type of combiners are used.

    * **Spatial Diversity Based**: The ones which aim to maximizes the received power.

        * DFT based combiners.
        * Direction of arrival based combiners.

    * **Spatial Multiplexing based**: The ones which aim to reduces the interlayer/path interference.

        * SVD based combiners.


The ``ReceiveCombining`` module in 5G Toolkit provide APIs to facilitate all these cases. It provide the ways to support
all type of combiners. A few such examples are listed below.

---------

**For Custom Combiner:**

.. code:: ipython3

    # Wr (Custom Combiner) of shape: numberOfCombiners x Nr
    # y (Received Grid) of shape: ... x Nr (N1 x N2 x N3 x Nr)

    method      = "custom"
    rxCombining = ReceiveCombining(combinerType = method)
    yCombined   = rxCombining(y, Wr)

    # yCombined (Combined received Grid) of shape: ... x numberOfCombiners (N1 x N2 x N3 x numberOfCombiners)



**For DFT beams based Combiner: Returns Output with highest Power**

.. code:: ipython3

    # numBeams (number of Beams) should be > Nr.
    # y (Received Grid) of shape: (: x Nr) (For ex: N1 x Nr)

    method      = "dft"
    outType     = "best"
    numBeams    = 64
    rxCombining = ReceiveCombining(combinerType = method, numDFTBeams = nBeam, output = out)
    yCombined   = rxCombining(y)

    # yCombined (Combined received Grid) of shape: (:,) (For ex: N1,))


**For DFT beams based Combiner: Returns all the Combined Outputs**

.. code:: ipython3

    # numBeams (number of Beams) should be > Nr.
    # y (Received Grid) of shape: ... x Nr (For ex: N1 x N2 x N3 x Nr)

    method      = "dft"
    outType     = "all"
    numBeams    = 18
    rxCombining = ReceiveCombining(combinerType = method)
    yCombined   = rxCombining(y)

    # yCombined (Combined received Grid) of shape: ... x numBeams (For ex: N1 x N2 x N3 x numBeams)

**For Direction of Arrival based Combiner: Returns all the Combined Outputs**

.. code:: ipython3

    # angles (2D Direction of Arrivals) of shape: numberAngles x 2
    # Nr_x: Number of Antenna elements in each row of the 2D planner array
    # Nr_y: Number of Antenna elements in each column of the 2D planner array
    # P: Polarization Order
    # y (Received Grid) of shape: ... x Nr (For ex: N1 x N2 x N3 x Nr)

    method      = "doa"
    carrierFreq = 3.6*10**9 # carrier frequency is 3.6 GHz
    speedOfLight= 3*10**8   # speed of light (m/s)
    spacing     = np.array([0.5, 0.5])*(speedOfLight/carrierFreq)
    rxCombining = ReceiveCombining(combinerType = method, carrierFrequency = fc)
    yCombined   = rxCombining(y, angles, spacing, np.array([Nr_x, Nr_y, P]))

    # yCombined (Combined received Grid) of shape: ... x numberAngles (For ex: N1 x N2 x N3 x numberAngles)


---------

**API Documentation**


The details about the input-output interface of the ReceiveCombining modules is provided below.

.. autoclass:: toolkit5G.MIMOProcessing.ReceiveCombining
    :members:
    :exclude-members: call, build

