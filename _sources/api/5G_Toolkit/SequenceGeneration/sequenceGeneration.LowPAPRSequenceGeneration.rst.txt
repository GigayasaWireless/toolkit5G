Low PAPR Sequence Type 1
========================
The following example is provided generating the Low PAPR Sequence Type 1. The procedure of the implementation of low PAPR
sequence are given in section 6.3.2 of [3GPPTS38211LowPAPR]_. The details of parameter used for low PAPR sequence generation
of provided in section 9.2 of [3GPPTS38213LowPAPR]_.

.. code-block:: python

   m            = 1  # Number of Physical Resource Blocks allocated
   groupNumber  = 12 # Group Number
   seqNumber    = 0  # Sequence Number
   cyclicShift  = np.array([[3.14159265 5.75958653 2.0943951  4.71238898 1.04719755 3.66519143 0.  2.61799388 5.23598776 1.57079633 4.1887902 ]]) #Cyclic Shift

   Object = LowPAPRSeqType1()(m, groupNumber, seqNumber, cyclicShift)

.. autoclass:: toolkit5G.SequenceGeneration.LowPAPRSeqType1
   :members:
   :exclude-members: call, build




Cyclic Shift Hopping
--------------------
The Information content is varied for different users. Also, the sequence generated is Interlace Resource Block dependent. And so, based on batching and enablement of Interlaced Transmission the cyclic shift(s) is/are generated.

The following example is provided for enabling the Interlaced Transmission

.. code-block:: python

   numBatches             = 5 #Number of User Equipments
   interlacedTransmission = True #Enabling/Disabling Interlaced Transmission
   numofSymbols           = 4 #Number of Symbols
   symbolIndex_start      = 5 #Starting Symbol Index
   symbolNum              = 0 #Symbol Number
   initialCycShift        = 8 #Initial Cyclic Shift
   slotNumber             = 10 #Slot Number
   nID                    = 257 #Hopping ID
   m_CS                   = np.array([6 1 7 3 4]) #Cyclic Shift Offset based on information content
   numInterlacedRBs       = 11 #Number of Interlaced Resource Blocks

   Object = CyclicShiftHopping(interlacedTransmission) #CyclicShiftHopping Object
   Output = Object(initialCycShift, m_CS, symbolIndex_start, nID, slotNumber, numInterlacedRBs, symbolNum) #generates array of cyclic shift(s)
   
In case of disabling the Interlaced Transmission

.. code-block:: python

   numBatches             = 7 #Number of User Equipments
   interlacedTransmission = False #Enabling/Disabling Interlaced Transmission
   numofSymbols           = 13 #Number of Symbols
   symbolIndex_start      = 0 #Starting Symbol Index
   symbolNum              = 3 #Symbol Number
   initialCycShift        = 8 #Initial Cyclic Shift
   slotNumber             = 2 #Slot Number
   nID                    = 387 #Hopping ID
   m_CS                   = np.array([9 9 4 0 7 9 4]) #Cyclic Shift Offset based on information content
   numInterlacedRBs       = None #Number of Interlaced Resource Blocks

   Object = CyclicShiftHopping(interlacedTransmission) #CyclicShiftHopping Object
   Output = Object(initialCycShift, m_CS, symbolIndex_start, nID, slotNumber, numInterlacedRBs, symbolNum) #generates array of cyclic shift(s)


.. autoclass:: toolkit5G.SequenceGeneration.CyclicShiftHopping
   :members:
   :exclude-members: call, build 


     
Group And Sequence Hopping
--------------------------
The group hopping and Sequence hopping can be enabled/disabled

The example below considers enabling both the group and sequence hopping and generates group and sequence number accordingly.

.. code-block:: python

   intraSlotFreqHopping = False #Enabling/Disabling Intra Slot Frequency Hopping
   slotNumber           = 7 # Slot Number
   nHop                 = 0 # Frequency Hopping Index
   nID                  = 373 # Hopping ID
   pucch_GroupHopping   = 'Enable' #Enabling/Disabling Group and/or Sequence Hopping
   
   Object = GroupNumber(intraSlotFreqHopping) #Object
   Output = Object(nID, nHop, slotNumber, pucch_GroupHopping) #Generates the Group number and sequence number
   
The example below considers neither group and sequence hopping and generates group and sequence number accordingly.

.. code-block:: python

   intraSlotFreqHopping = True #Enabling/Disabling Intra Slot Frequency Hopping
   slotNumber           = 7 # Slot Number
   nHop                 = 0 # Frequency Hopping Index
   nID                  = 969 # Hopping ID
   pucch_GroupHopping   = 'neither' #Enabling/Disabling Group and/or Sequence Hopping
   
   Object = GroupNumber(intraSlotFreqHopping) #Object
   Output = Object(nID, nHop, slotNumber, pucch_GroupHopping) #Generates the Group number and sequence number

The example below considers disabling the  group and sequence hopping and generates group and sequence number accordingly.

.. code-block:: python

   intraSlotFreqHopping = False #Enabling/Disabling Intra Slot Frequency Hopping
   slotNumber           = 3 # Slot Number
   nHop                 = 0 # Frequency Hopping Index
   nID                  = 221 # Hopping ID
   pucch_GroupHopping   = 'Disable' #Enabling/Disabling Group and/or Sequence Hopping
   
   Object = GroupNumber(intraSlotFreqHopping) #Object
   Output = Object(nID, nHop, slotNumber, pucch_GroupHopping) #Generates the Group number and sequence number


.. autoclass:: toolkit5G.SequenceGeneration.GroupNumber
   :members:
   :exclude-members: call, build 


References:
    .. [3GPPTS38211LowPAPR] (3GPP TS 38.211 version 17.1.0 Release 17) 5G;NR;Physical channels and modulation.

    .. [3GPPTS38213LowPAPR] (3GPP TS 38.213 version 16.5.0 Release 16) 5G;NR;Physical layer procedures for control.

