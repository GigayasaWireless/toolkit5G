Least Squares based Position Estimator for TDoA
==================================================

The :math:`\text{4G}^\text{th}` and :math:`\text{5G}^\text{th}` generation of wireless networks uses time difference of
arrival methods to estimate the position of node. The nomenclature of the methods is detailed below. The implementation
of Newton Raphson and Gradient Descent optimization methods is inspired from [handbookTDoA]_.


.. list-table:: Table-1: TDoA in 4G and 5G Networks
   :widths: 25 25 25 25
   :header-rows: 1

   * - Generation
     - Method
     - Measurement
     - Optimization methods
   * - 4G
     - OTDoA
     - RSTD
     - LeastSquares, NewtonRaphson, GradientDescent
   * - 5G
     - DL-TDoA
     - RSTD
     - LeastSquares, NewtonRaphson, GradientDescent
   * - 5G
     - UL-TDoA
     - UL-RTOA
     - LeastSquares, NewtonRaphson, GradientDescent

In 5G, the ToA estimates suffers from calibration impairments and antenna to base-band delays which propagates
in-accuracies in the position estimates. However, the TDoA measurements are computed by taking difference of all ToA
measurements with respect to one reference ToA measurement which can cancel the fixed receiver antenna to base-band
delay across all the measurements. This makes TDoA measurements more robust to these impairments in comparison to ToA
measurements. The major challenges with TDoA based positioning are two.

- Require atleast 4 accurate ToA (3 accurate TDoA) measurements.

- In case reference ToA measurement is NLoS, positioning accuracy degrades significantly.

Hence, TDoA based positioning methods rely on iterative optimization methods. One such optimization method is **Gradient
Descent** (GD) which has low complexity iteration in comparison to **Newton Raphson** (NR) method but needs more
iterations to converge to local/global optima. The comparison between the two methods is shown below:

.. list-table:: Table-2: Performance comparison between Least Squares, Gradient Descent and Newton Raphson algorithm.
   :widths: 25 25 25 25
   :header-rows: 1

   * - Method
     - Computational Complexity
     - Convergence
   * - Least Square
     - :math:`\text{N}^2`
     - Fastest
   * - Gradient Descent
     - :math:`N_\text{iterations} \times \text{N}`
     - Slowest
   * - Newton Raphson
     - :math:`N_\text{iterations} \times \text{N}^2`
     - Slow

where N denotes the number of measurements used for positioning and :math:`N_\text{iterations}` denotes the number of
iterations used by iterative methods.


------------

The following code illustrate the way to compute the time difference of arrival (TDoA) using time of arrival (ToA). The
TDoA/RSTD measurement is passed to Newton Raphson optimization method to estimate the user equipment (UE) location.

**Code example**

.. code-block:: Python

    positionEstimate = LeastSquareTDoA()
    # Position Estimation Object:
        # Positioning based on: TDoA
        # Optimization Method: Least Squares
        # ToAe: (Nref,)
        # txPosition: (Nref,3)
    tdoa = ToAe[1::] - ToAe[0] # Time difference of arrival/RSTD
    rxPositionEstimate, error = positionEstimate(txPosition, tdoa) # Position estimation using TDoA/RSTD


------------

The details of input output interface for usage is detailed below.

.. autoclass:: toolkit5G.Positioning.LeastSquareTDoA
   :members:
   :exclude-members: call, build

Gradient Descent based Position Estimator for TDoA
==================================================


**Code example**

.. code-block:: Python

    positionEstimate = GradientDescentTDoA(numIterations = 100000, numRepetition = 10,
                                         tolerance = 0.0000000001, stepsize = 0.1)
    # Position Estimation Object:
        # Positioning based on: TDoA
        # Optimization Method: Gradient Descent
        # ToAe: (Nref,)
        # txPosition: (Nref,3)
    tdoa = ToAe[1::] - ToAe[0] # Time difference of arrival/RSTD
    rxPositionEstimate, error = positionEstimate(txPosition, tdoa) # Position estimation using TDoA/RSTD

The input output interface for usage of Gradient Descent algorithm is provided below.

.. autoclass:: toolkit5G.Positioning.GradientDescentTDoA
   :members:
   :exclude-members: call, build

------------

Newton Raphson based Position Estimator for TDoA
==================================================

The following code snippet illustrate the way to compute the time difference of arrival (TDoA) using time of arrival
(ToA). The TDoA/RSTD measurement is passed to Newton Raphson optimization method to estimate the user equipment (UE)
location.

**Code example**

.. code-block:: Python

    positionEstimate = NewtonRaphsonTDoA(numIterations = 100000, numRepetition = 10,
                                         tolerance = 0.0000000001, stepsize = 0.1)
    # Position Estimation Object:
        # Positioning based on: TDoA
        # Optimization Method: Newton Raphson
        # ToAe: (Nref,)
        # txPosition: (Nref,3)
    tdoa = ToAe[1::] - ToAe[0] # Time difference of arrival/RSTD
    rxPositionEstimate, error = positionEstimate(txPosition, tdoa) # Position estimation using TDoA/RSTD


------------

The details of input output interface for usage is detailed below.

.. autoclass:: toolkit5G.Positioning.NewtonRaphsonTDoA
   :members:
   :exclude-members: call, build


References:
    .. [handbookTDoA] So, H. C., and RMB Reza Zekavat. "Handbook of position location: Theory, practice and advances." The Oxford Handbook of Innovation. No. 2. Wiley-IEEE Press, 2011. 23-34.
