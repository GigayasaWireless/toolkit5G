{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "11d223f3",
   "metadata": {},
   "source": [
    "# Constellation Learning in an AWGN Channel\n",
    "\n",
    "In this notebook, we will learn how to implement an end-to-end digital communication system as an `AutoEncoder`[1] and compared its performance with a `(n,k) Hamming Code`. \n",
    "\n",
    " * We analyze the performance of an autoencoder based modeling of a communication system as opposed to                  traditional modeling, where designing signal alphabet at transmitter (Tx) and detection algorithms at    receiver    (Rx) are based on a given mathematical/statistical channel/system model.\n",
    " \n",
    "\n",
    " * We simulate the performance of an AutoEncoder based communication link in the presence of Additive White Gaussian    Noise (AWGN), where Tx sends one out of ``M`` message/information symbols per `n` channel uses through a noisy      channel and the Rx estimates the transmitted symbols through noisy observations.\n",
    " \n",
    "\n",
    "* `The goal is to learn a signalling alphabet/constellation scheme that is robust with respect to the noise            introduced by the channel at Tx`\n",
    "\n",
    "\n",
    "\n",
    " ## Table of Contents\n",
    "\n",
    "* [Importing Libraries](#import-libraries)\n",
    "* [Parameters of AE](#AE-parameters)\n",
    "* [Training Data](#training-data-set)\n",
    "* [Testing Data](#testing-data-set)\n",
    "* [Normalization Functions](#norm-func)\n",
    "* [Defining AE Model](#AE-model)\n",
    "* [Training AE](#AE-training)\n",
    "* [Defining Tx, Channel and Rx from Trained AE](#individual-model)\n",
    "* [Constellation Learning](#constellation-learning)\n",
    "* [Block Error Rate (BLER) performance](#BLER)\n",
    "* [References](#ref)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0542af65",
   "metadata": {},
   "source": [
    "### PHY layer as AutoEncoder"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d7adf74",
   "metadata": {},
   "source": [
    "* The fundamental idea behind this tutorial is to model Physical Layer as an ``AutoEncoder``(AE).\n",
    "\n",
    "\n",
    "* An ``AutoEncoder``(AE) is an Artificial Neural Network (ANN) used to learn an efficient representation of data at   an intermediate layer to reproduce the input at its output.\n",
    "\n",
    "\n",
    "* We Interpret end to end communication link, i.e., Tx, channel, and Rx as a single Neural Network (NN) that can be   trained as an AE which reconstructs its input at its output, as communication is all about                           reproducing/reconstructing messages transmitted by Tx at Rx faithfully in the presence of channel perturbations     and Rx noise."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53b6df87",
   "metadata": {},
   "source": [
    "### Steps"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8e89aa8",
   "metadata": {},
   "source": [
    "Following are the steps that we follow in simulation:\n",
    "\n",
    "* Define the hyper parameters of AE :\n",
    "    - number of information symbols `M`, where each symbol carry `k`bits\n",
    "    \n",
    "    - number of channel uses `n`\n",
    "    \n",
    "    - snr in dB at which AE is being trained, which we call `snr_train`\n",
    "    \n",
    "    \n",
    "    \n",
    "* Define embedings for each information symbol that is to be fed as an input to AE.\n",
    "\n",
    "\n",
    "* Define training and testing data set by randomizing the label\n",
    "\n",
    "\n",
    "* Define end to end AutoEncoder by using the already imported `keras` built in layers.\n",
    "\n",
    "    - Tx is being implmented as a stack of two keras `Dense` layers one with `ReLU` activation and another with           `linear` activation. The output of the second Dense layer is fed to a normalization layer which we implement         using keras `Lambda` layer.\n",
    "    \n",
    "    - Channel is implemented as a single `Noise` layer with certain noise standard deviation, which is a function of       both Rate of the code (R) and snr_train.\n",
    "    \n",
    "    - Rx also consists of two keras Dense layers, one with `ReLU` activation and the last one with `softmax`               activation. The last layer must output probabilities (i.e., for a given received noisy vector **v** of               dimension M, it outputs max aposteriori probability vector of dimension M, i.e.,                                     max(prob(**w**|**v**)) for any **w** belongs to transmitted oneshot embeddings)\n",
    "\n",
    "**Note:**  We choose different values of number of training (`N`) and testing samples (`N_test`) for constellation plots and for BlockErrorRate (BLER) plots.\n",
    "\n",
    "\n",
    "**Note:** For `(n,k) = (7,4)`, we use `sklearn T-distributed Stochastic Neighbor Embedding (TSNE)` to plot the learned constellation. Typically we use less number of `N` and `N_test` in such cases.\n",
    "For BLER plots we always go with high values of `N`, `N_test`   "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe2a8e66",
   "metadata": {},
   "source": [
    "![title](img/autoencoder.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4d19db8",
   "metadata": {},
   "source": [
    "## Importing Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "89d74c54",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"-1\"\n",
    "os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' \n",
    "\n",
    "\n",
    "# Importing necessary Numpy, Matplotlib, TensorFlow, Keras and scikit-learn modules\n",
    "# %matplotlib widget\n",
    "# %matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from keras.layers import Input, Dense, GaussianNoise, Lambda, BatchNormalization\n",
    "from keras.models import Model\n",
    "from keras.optimizers import Adam, SGD\n",
    "from keras import backend as be"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f963d5b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "sys.path.append(\".\")\n",
    "from toolkit5G.SymbolMapping import Demapper\n",
    "from toolkit5G.SymbolMapping import Mapper\n",
    "from toolkit5G.ChannelCoder  import HammingEncoder\n",
    "from toolkit5G.ChannelCoder  import HammingDecoder"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60b5e0f2",
   "metadata": {},
   "source": [
    "The following code cell defines the parametes of an AutoEncoder including the `snr_dB` at which it is being trained.\n",
    "We assume (n,k) = (7,4) here but the code is generailized to support other configurations as well such as (2,4) and (2,2) given in [1] "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2fd91691",
   "metadata": {},
   "source": [
    "## Parameters of AutoEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ef446c0a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "###################################################################################################\n",
      "Parameters of (7, 4) AutoEncoder are:\n",
      "\n",
      "Number of Information Symbols:16\n",
      "Number of Bits Per Information Symbol:4\n",
      "Number of Channel Uses:7\n",
      "Rate of Communication:0.5714285714285714\n"
     ]
    }
   ],
   "source": [
    "#################################################\n",
    "# Parameters of a (n,k) AutoEncoder (AE)\n",
    "# all the symbols are assumed to be real valued\n",
    "#################################################\n",
    "\n",
    "# number of information/message symbols that Tx communicates over channel to Rx\n",
    "M = 16 \n",
    "# number of bits per information symbol\n",
    "k = int(np.log2(M)) \n",
    "# number of channel uses or dimension of each code-word symbol or number of bits per code-word symbol\n",
    "n = 7\n",
    "# Rate of communication. i.e., k bits per n channel uses\n",
    "R = k/n \n",
    "print(\"###################################################################################################\")\n",
    "print(\"Parameters of \"+str((n,k))+\" AutoEncoder are:\\n\")\n",
    "print(\"Number of Information Symbols:\" + str(M))\n",
    "print(\"Number of Bits Per Information Symbol:\" + str(k))\n",
    "print(\"Number of Channel Uses:\" + str(n))\n",
    "print(\"Rate of Communication:\" + str(R))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5e05dc2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "###################################\n",
    "#SNR at which AE is being trained\n",
    "###################################\n",
    "#---------------------------------------------------------------------------------------------------------------\n",
    "# SNR in dB = Es/No, where Es: Energy per symbol, No: Noise Power Spectral Density\n",
    "snr_dB = 7 \n",
    "# snr in linear scale\n",
    "snr_train = np.power(10,snr_dB/10) \n",
    "# noise standard deviation\n",
    "noise_stddev = np.sqrt(1/(2*R*snr_train))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7050b7c4",
   "metadata": {},
   "source": [
    "## Training Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6e586817",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "One-Hot Encodings of information symbols:\n",
      "\n",
      "[[1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]]\n"
     ]
    }
   ],
   "source": [
    "#############################################\n",
    "# One-hot embeddings of information symbols.\n",
    "#############################################\n",
    "# Each information symbol is mapped to a standard basis vector of dimension M\n",
    "\n",
    "symbol_encodings = np.eye(M) \n",
    "print(\"One-Hot Encodings of information symbols:\\n\")\n",
    "print(symbol_encodings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5a62478c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1  8  4 ... 10  1 10]\n"
     ]
    }
   ],
   "source": [
    "###############################################################################\n",
    "# Generating data samples of size N. Each sample can take values from 0 to M-1\n",
    "###############################################################################\n",
    "N  = 9600000\n",
    "#*********************************************************************************\n",
    "# use this value of N only for Constellation plot when using TSNE under (7,4) AE\n",
    "# N = 1500\n",
    "#*********************************************************************************\n",
    "# random indices for labeling information symbols\n",
    "train_label = np.random.randint(M,size=N)\n",
    "print(train_label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6334175a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "The shape of training data:\n",
      "(9600000, 16)\n"
     ]
    }
   ],
   "source": [
    "########################\n",
    "# Training data samples\n",
    "########################\n",
    "data = []\n",
    "for i in train_label:\n",
    "    temp = np.zeros(M)\n",
    "    temp[i] = 1\n",
    "    data.append(temp)\n",
    "# converting data in to a numpy array    \n",
    "train_data = np.array(data)\n",
    "print(\"\\n\")\n",
    "# Printing the shape of training data\n",
    "print(\"The shape of training data:\")\n",
    "print(train_data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "04f271e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[6634013 5698954 7797983 1647048 8484082 5849713 6844526 1561517 3625133\n",
      " 6378228 3180495 1370770 5104703]\n",
      "\n",
      "\n",
      "11 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]\n",
      "7 [0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      "15 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]\n",
      "14 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]\n",
      "15 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]\n",
      "10 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n",
      "12 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0.]\n",
      "8 [0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0.]\n",
      "13 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0.]\n",
      "11 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]\n",
      "9 [0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]\n",
      "2 [0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      "3 [0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n"
     ]
    }
   ],
   "source": [
    "# Verifying training data with its label or index for 13 samples\n",
    "\n",
    "tempLabel_train = np.random.randint(N,size=13)\n",
    "print(tempLabel_train)\n",
    "print(\"\\n\")\n",
    "for i in tempLabel_train:\n",
    "    print(train_label[i],train_data[i])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68dcaed2",
   "metadata": {},
   "source": [
    "## Testing Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a3418e5a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The shape of test data is:\n",
      "(16000, 16)\n"
     ]
    }
   ],
   "source": [
    "###############################\n",
    "# Generating data for testing\n",
    "###############################\n",
    "N_test = 16000\n",
    "#**************************************************\n",
    "# use this only for Constellation Plot of (7,4) AE\n",
    "# N_test = 500\n",
    "#**************************************************\n",
    "test_label = np.random.randint(M,size=N_test)\n",
    "test_data = []\n",
    "for i in test_label:\n",
    "    temp    = np.zeros(M)\n",
    "    temp[i] = 1\n",
    "    test_data.append(temp)\n",
    "# converting it to a numpy array     \n",
    "test_data = np.array(test_data)\n",
    "# Printing the shape of test data\n",
    "print(\"The shape of test data is:\")\n",
    "print(test_data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f63aa712",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[11519  4498 10702  6711  2993  9873  5688]\n",
      "\n",
      "\n",
      "4 [0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      "2 [0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      "3 [0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      "13 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0.]\n",
      "9 [0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]\n",
      "3 [0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      "6 [0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n"
     ]
    }
   ],
   "source": [
    "# Verifying test data with its label for 7 sample\n",
    "tempTestLabel = np.random.randint(N_test,size=7)\n",
    "print(tempTestLabel)\n",
    "print(\"\\n\")\n",
    "for i in tempTestLabel:\n",
    "    print(test_label[i],test_data[i])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c53b916a",
   "metadata": {},
   "source": [
    "## Normalization Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0716d720",
   "metadata": {},
   "outputs": [],
   "source": [
    "def normalizeAvgPower(x):\n",
    "    \"\"\" Normalizes the power of input tensor\"\"\"\n",
    "    return x/(be.sqrt(be.mean(x**2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "84ec44be",
   "metadata": {},
   "outputs": [],
   "source": [
    "def normalizeEnergy(x):\n",
    "    \"\"\" Normalizes the energy of input tensor\"\"\"\n",
    "    return np.sqrt(n)*(be.l2_normalize(x,axis=-1))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d746ef87",
   "metadata": {},
   "source": [
    "## Defining AutoEncoder Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "50876d80",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " input_1 (InputLayer)        [(None, 16)]              0         \n",
      "                                                                 \n",
      " dense (Dense)               (None, 16)                272       \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 7)                 119       \n",
      "                                                                 \n",
      " lambda (Lambda)             (None, 7)                 0         \n",
      "                                                                 \n",
      " gaussian_noise (GaussianNo  (None, 7)                 0         \n",
      " ise)                                                            \n",
      "                                                                 \n",
      " dense_2 (Dense)             (None, 16)                128       \n",
      "                                                                 \n",
      " dense_3 (Dense)             (None, 16)                272       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 791 (3.09 KB)\n",
      "Trainable params: 791 (3.09 KB)\n",
      "Non-trainable params: 0 (0.00 Byte)\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "##########################################\n",
    "# Defining AutoEncoder and its layers\n",
    "##########################################\n",
    "#----------------------------------------------------------------------------------------------------------------\n",
    "###########\n",
    "# Tx layer\n",
    "###########\n",
    "onehot  = Input(shape=(M,))\n",
    "dense1  = Dense(M, activation = 'relu')(onehot)\n",
    "dense2  = Dense(n, activation = 'linear')(dense1)\n",
    "x       = Lambda(normalizeAvgPower)(dense2)      # Avg power constraint\n",
    "# x       = Lambda(normalizeEnergy)(dense2)      # Energy constraint\n",
    "#****************************************************************************************\n",
    "################\n",
    "# Channel Layer\n",
    "################\n",
    "y       = GaussianNoise(stddev = noise_stddev)(x)\n",
    "#****************************************************************************************\n",
    "###########\n",
    "# Rx layer\n",
    "###########\n",
    "dense3  = Dense(M, activation = 'relu')(y)\n",
    "prob    = Dense(M, activation = 'softmax')(dense3) \n",
    "#-----------------------------------------------------------------------------------------------------------------\n",
    "#########################################\n",
    "# Defining end to end AutoEncoder Model\n",
    "#########################################\n",
    "autoEncoder = Model(onehot, prob)\n",
    "#-----------------------------------------------------------------------------------------------------------------\n",
    "# Instantiate optimizer\n",
    "adam        = Adam(learning_rate=0.01)\n",
    "# Instantiate Stochastic Gradient Descent Method\n",
    "sgd         = SGD(learning_rate=0.02)\n",
    "#-----------------------------------------------------------------------------------------------------------------\n",
    "# compile end to end model\n",
    "autoEncoder.compile(optimizer=adam, loss='categorical_crossentropy')\n",
    "#-----------------------------------------------------------------------------------------------------------------\n",
    "# printing summary of layers and its trainable parameters\n",
    "print(autoEncoder.summary())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96eab5b1",
   "metadata": {},
   "source": [
    "In the following code snippet we show how to train an end to end AE by a call to `fit()` method specifying the training and validation data. We choose 50 `epochs` with a `batch_size` of 1024. One can vary these values to obtain a different trainable model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c9fb839",
   "metadata": {},
   "source": [
    "## Training AutoEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "308c84b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "1172/1172 [==============================] - 5s 3ms/step - loss: 0.0619 - val_loss: 1.8036e-06\n",
      "Epoch 2/50\n",
      "1172/1172 [==============================] - 4s 3ms/step - loss: 0.0016 - val_loss: 1.1638e-07\n",
      "Epoch 3/50\n",
      "1172/1172 [==============================] - 4s 3ms/step - loss: 0.0011 - val_loss: 7.2494e-09\n",
      "Epoch 4/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 9.0464e-04 - val_loss: 0.0000e+00\n",
      "Epoch 5/50\n",
      "1172/1172 [==============================] - 4s 3ms/step - loss: 7.9008e-04 - val_loss: 0.0000e+00\n",
      "Epoch 6/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 7.7934e-04 - val_loss: 0.0000e+00\n",
      "Epoch 7/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 7.0910e-04 - val_loss: 0.0000e+00\n",
      "Epoch 8/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 6.8701e-04 - val_loss: 0.0000e+00\n",
      "Epoch 9/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 6.5150e-04 - val_loss: 0.0000e+00\n",
      "Epoch 10/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 6.3850e-04 - val_loss: 0.0000e+00\n",
      "Epoch 11/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 6.4894e-04 - val_loss: 0.0000e+00\n",
      "Epoch 12/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 5.9537e-04 - val_loss: 0.0000e+00\n",
      "Epoch 13/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 5.8190e-04 - val_loss: 0.0000e+00\n",
      "Epoch 14/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 5.9939e-04 - val_loss: 0.0000e+00\n",
      "Epoch 15/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 5.6062e-04 - val_loss: 0.0000e+00\n",
      "Epoch 16/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 5.6521e-04 - val_loss: 0.0000e+00\n",
      "Epoch 17/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 5.4805e-04 - val_loss: 0.0000e+00\n",
      "Epoch 18/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 5.6737e-04 - val_loss: 0.0000e+00\n",
      "Epoch 19/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 5.5437e-04 - val_loss: 0.0000e+00\n",
      "Epoch 20/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 5.3964e-04 - val_loss: 0.0000e+00\n",
      "Epoch 21/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 5.1038e-04 - val_loss: 0.0000e+00\n",
      "Epoch 22/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 5.5104e-04 - val_loss: 0.0000e+00\n",
      "Epoch 23/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 5.2465e-04 - val_loss: 0.0000e+00\n",
      "Epoch 24/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 5.3718e-04 - val_loss: 0.0000e+00\n",
      "Epoch 25/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 5.2150e-04 - val_loss: 0.0000e+00\n",
      "Epoch 26/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 5.2325e-04 - val_loss: 0.0000e+00\n",
      "Epoch 27/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 5.2213e-04 - val_loss: 0.0000e+00\n",
      "Epoch 28/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 5.0728e-04 - val_loss: 0.0000e+00\n",
      "Epoch 29/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 5.0278e-04 - val_loss: 0.0000e+00\n",
      "Epoch 30/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 5.3612e-04 - val_loss: 0.0000e+00\n",
      "Epoch 31/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 5.0515e-04 - val_loss: 0.0000e+00\n",
      "Epoch 32/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 5.1903e-04 - val_loss: 0.0000e+00\n",
      "Epoch 33/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 5.2265e-04 - val_loss: 0.0000e+00\n",
      "Epoch 34/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 4.9100e-04 - val_loss: 0.0000e+00\n",
      "Epoch 35/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 4.7689e-04 - val_loss: 0.0000e+00\n",
      "Epoch 36/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 4.8344e-04 - val_loss: 0.0000e+00\n",
      "Epoch 37/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 4.7145e-04 - val_loss: 0.0000e+00\n",
      "Epoch 38/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 4.9232e-04 - val_loss: 0.0000e+00\n",
      "Epoch 39/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 4.5073e-04 - val_loss: 0.0000e+00\n",
      "Epoch 40/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 4.7231e-04 - val_loss: 0.0000e+00\n",
      "Epoch 41/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 4.4049e-04 - val_loss: 0.0000e+00\n",
      "Epoch 42/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 4.3347e-04 - val_loss: 0.0000e+00\n",
      "Epoch 43/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 4.5009e-04 - val_loss: 0.0000e+00\n",
      "Epoch 44/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 4.5302e-04 - val_loss: 0.0000e+00\n",
      "Epoch 45/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 4.3693e-04 - val_loss: 0.0000e+00\n",
      "Epoch 46/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 4.4082e-04 - val_loss: 0.0000e+00\n",
      "Epoch 47/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 4.4123e-04 - val_loss: 0.0000e+00\n",
      "Epoch 48/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 4.5702e-04 - val_loss: 0.0000e+00\n",
      "Epoch 49/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 4.3058e-04 - val_loss: 0.0000e+00\n",
      "Epoch 50/50\n",
      "1172/1172 [==============================] - 3s 3ms/step - loss: 4.3849e-04 - val_loss: 0.0000e+00\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.src.callbacks.History at 0x29775d74b80>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#######################\n",
    "# Training Auto Encoder\n",
    "########################\n",
    "autoEncoder.fit(train_data, train_data,\n",
    "                epochs = 50,\n",
    "                batch_size = 8*1024,\n",
    "                validation_data=(test_data, test_data))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a60fbcf9",
   "metadata": {},
   "source": [
    "## Defining Tx, Channel and Rx from Trained AutoEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e438e00e",
   "metadata": {},
   "outputs": [],
   "source": [
    "########################################################\n",
    "# Defining Tx from end to end trained autoEncoder model\n",
    "#######################################################\n",
    "\n",
    "transmitter   = Model(onehot, x)\n",
    "#*********************************************************\n",
    "#######################\n",
    "# Defining channel part \n",
    "#######################\n",
    "channelInput  = Input(shape=(n,))\n",
    "channelOutput = autoEncoder.layers[-3](channelInput)\n",
    "channel       = Model(channelInput, channelOutput)\n",
    "#*********************************************************\n",
    "##################\n",
    "# Defining Rx part\n",
    "##################\n",
    "rxInput       = Input(shape=(n,))\n",
    "rx1           = autoEncoder.layers[-2](rxInput)\n",
    "rxOutput      = autoEncoder.layers[-1](rx1)\n",
    "receiver      = Model(rxInput,rxOutput)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e2fe2ef",
   "metadata": {},
   "source": [
    "## Block Error Rate (BLER) performance"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "088b3f8a",
   "metadata": {},
   "source": [
    "The following code snippet computes and plots BLER performance of of `(n,k) AE` and compares it with base line `(n,k) Hamming code`.\n",
    "\n",
    "\n",
    "**Note:** Run the following code snippets only with high values of `N`, `N_test`. Comment all the following code snippet for constellation plots. Uncomment only for BLER plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3e2fdbf3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "500/500 [==============================] - 0s 517us/step\n",
      "500/500 [==============================] - 0s 503us/step\n",
      "SNR(dB): -4.0 BLER: 0.498375\n",
      "500/500 [==============================] - 0s 564us/step\n",
      "500/500 [==============================] - 0s 567us/step\n",
      "SNR(dB): -3.5 BLER: 0.458625\n",
      "500/500 [==============================] - 0s 587us/step\n",
      "500/500 [==============================] - 0s 522us/step\n",
      "SNR(dB): -3.0 BLER: 0.4203125\n",
      "500/500 [==============================] - 0s 567us/step\n",
      "500/500 [==============================] - 0s 555us/step\n",
      "SNR(dB): -2.5 BLER: 0.38725\n",
      "500/500 [==============================] - 0s 515us/step\n",
      "500/500 [==============================] - 0s 566us/step\n",
      "SNR(dB): -2.0 BLER: 0.3485625\n",
      "500/500 [==============================] - 0s 543us/step\n",
      "500/500 [==============================] - 0s 556us/step\n",
      "SNR(dB): -1.5 BLER: 0.3043125\n",
      "500/500 [==============================] - 0s 557us/step\n",
      "500/500 [==============================] - 0s 662us/step\n",
      "SNR(dB): -1.0 BLER: 0.2595\n",
      "500/500 [==============================] - 0s 529us/step\n",
      "500/500 [==============================] - 0s 535us/step\n",
      "SNR(dB): -0.5 BLER: 0.2265625\n",
      "500/500 [==============================] - 0s 556us/step\n",
      "500/500 [==============================] - 1s 1ms/step\n",
      "SNR(dB): 0.0 BLER: 0.1879375\n",
      "500/500 [==============================] - 0s 515us/step\n",
      "500/500 [==============================] - 0s 540us/step\n",
      "SNR(dB): 0.5 BLER: 0.152\n",
      "500/500 [==============================] - 0s 536us/step\n",
      "500/500 [==============================] - 0s 518us/step\n",
      "SNR(dB): 1.0 BLER: 0.122375\n",
      "500/500 [==============================] - 0s 548us/step\n",
      "500/500 [==============================] - 0s 529us/step\n",
      "SNR(dB): 1.5 BLER: 0.092\n",
      "500/500 [==============================] - 0s 560us/step\n",
      "500/500 [==============================] - 0s 551us/step\n",
      "SNR(dB): 2.0 BLER: 0.0673125\n",
      "500/500 [==============================] - 0s 578us/step\n",
      "500/500 [==============================] - 0s 544us/step\n",
      "SNR(dB): 2.5 BLER: 0.0513125\n",
      "500/500 [==============================] - 0s 555us/step\n",
      "500/500 [==============================] - 0s 512us/step\n",
      "SNR(dB): 3.0 BLER: 0.03275\n",
      "500/500 [==============================] - 0s 568us/step\n",
      "500/500 [==============================] - 0s 553us/step\n",
      "SNR(dB): 3.5 BLER: 0.02025\n",
      "500/500 [==============================] - 0s 523us/step\n",
      "500/500 [==============================] - 0s 538us/step\n",
      "SNR(dB): 4.0 BLER: 0.011375\n",
      "500/500 [==============================] - 0s 520us/step\n",
      "500/500 [==============================] - 0s 515us/step\n",
      "SNR(dB): 4.5 BLER: 0.0071875\n",
      "500/500 [==============================] - 0s 504us/step\n",
      "500/500 [==============================] - 0s 549us/step\n",
      "SNR(dB): 5.0 BLER: 0.0045625\n",
      "500/500 [==============================] - 0s 567us/step\n",
      "500/500 [==============================] - 0s 528us/step\n",
      "SNR(dB): 5.5 BLER: 0.0015\n",
      "500/500 [==============================] - 0s 533us/step\n",
      "500/500 [==============================] - 0s 539us/step\n",
      "SNR(dB): 6.0 BLER: 0.0011875\n",
      "500/500 [==============================] - 0s 575us/step\n",
      "500/500 [==============================] - 0s 536us/step\n",
      "SNR(dB): 6.5 BLER: 0.00025\n",
      "500/500 [==============================] - 0s 555us/step\n",
      "500/500 [==============================] - 0s 522us/step\n",
      "SNR(dB): 7.0 BLER: 0.000125\n",
      "500/500 [==============================] - 0s 489us/step\n",
      "500/500 [==============================] - 0s 527us/step\n",
      "SNR(dB): 7.5 BLER: 0.000125\n",
      "500/500 [==============================] - 0s 536us/step\n",
      "500/500 [==============================] - 0s 510us/step\n",
      "SNR(dB): 8.0 BLER: 0.0\n"
     ]
    }
   ],
   "source": [
    "#######################################\n",
    "# SNR vs BLER computation and plotting\n",
    "#######################################\n",
    "# use this snr_dB = np.arange(0,15,2) for (n,k) = (2,4) or (2,2) AE\n",
    "# use this snr_dB = np.arange(-4,8.5,0.5) for (7,4) AE \n",
    "\n",
    "snr_dB = np.arange(-4,8.5,0.5)\n",
    "bler   = np.zeros(snr_dB.shape[0])\n",
    "for ii in range(0,snr_dB.shape[0]):\n",
    "    snr_linear      = 10.0**(snr_dB[ii]/10.0)      # snr in linear scale\n",
    "    noise_std       = np.sqrt(1/(2*R*snr_linear))\n",
    "    noise_mean      = 0\n",
    "    num_errors      = 0\n",
    "    num_samples     = N_test \n",
    "    #-------------------------------------------------------------\n",
    "    noise           = noise_std*np.random.randn(num_samples,n)\n",
    "    #-------------------------------------------------------------\n",
    "    #########################\n",
    "    # predicted input symbols\n",
    "    #########################\n",
    "    x_hat           = transmitter.predict(test_data)\n",
    "    #-------------------------------------------------------------\n",
    "    ##############\n",
    "    # noisy input\n",
    "    ##############\n",
    "    x_hat_noisy     = x_hat + noise\n",
    "    #-------------------------------------------------------------\n",
    "    ##########################\n",
    "    # predicted output symbols\n",
    "    ##########################\n",
    "    y_hat           = receiver.predict(x_hat_noisy)\n",
    "    #-------------------------------------------------------------\n",
    "    ##################\n",
    "    # symbol estimates\n",
    "    ##################\n",
    "    sym_estimates   = np.argmax(y_hat, axis=1) \n",
    "    #-------------------------------------------------------------\n",
    "    #################################################\n",
    "    # counting errors and computing bler at each snr\n",
    "    #################################################\n",
    "    num_errors      = int(np.sum(sym_estimates != test_label))    \n",
    "    bler[ii]        = num_errors/num_samples\n",
    "    print('SNR(dB):', snr_dB[ii], 'BLER:', bler[ii])\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c77336e4",
   "metadata": {},
   "source": [
    "## Hamming Codes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "961ddc7f",
   "metadata": {},
   "source": [
    "### Transmitter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "41b719fd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "******** (7,4) Hamming Code ********\n",
      "       Shape of Input:(1000000, 4)\n",
      "    Shape of Enc Bits:(1000000, 7)\n",
      "   Constellation type: bpsk\n",
      "Number of bits/symbol: 1\n",
      "*********************************\n",
      "\n"
     ]
    }
   ],
   "source": [
    "##############################\n",
    "## Hamming Code Configurations\n",
    "##############################\n",
    "## (n,k) code for any random positive integer m\n",
    "m = 3            \n",
    "k = 2**m - m - 1\n",
    "n = 2**m - 1\n",
    "#------------------------------------------------\n",
    "## Payload Generation\n",
    "numDim = 2\n",
    "n1     = 1000000\n",
    "bits   = np.random.randint(2, size = (n1,k))\n",
    "\n",
    "#-------------------------------------------------\n",
    "## Hamming Encoder\n",
    "encBits = HammingEncoder(k,n)(bits)\n",
    "\n",
    "## Rate Matching\n",
    "codeword = encBits\n",
    "\n",
    "## Symbol Mapping\n",
    "constellation_type  = \"bpsk\"\n",
    "num_bits_per_symbol = 1\n",
    "\n",
    "mapperObject        = Mapper(constellation_type, num_bits_per_symbol)\n",
    "symbols             = mapperObject(codeword)\n",
    "\n",
    "print()\n",
    "print(\"******** (\"+str(n)+\",\"+str(k)+\") Hamming Code ********\")\n",
    "print(\"       Shape of Input:\"+str(bits.shape))\n",
    "print(\"    Shape of Enc Bits:\"+str(encBits.shape))\n",
    "print(\"   Constellation type: \"+str(constellation_type))\n",
    "print(\"Number of bits/symbol: \"+str(num_bits_per_symbol))\n",
    "print(\"*********************************\")\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ca52d05d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "At SNR(dB): -4.0 | coded BLER (soft): 0.487595 | coded BLER(hard): 0.554942\n",
      "At SNR(dB): -3.5 | coded BLER (soft): 0.450965 | coded BLER(hard): 0.522681\n",
      "At SNR(dB): -3.0 | coded BLER (soft): 0.413592 | coded BLER(hard): 0.49012\n",
      "At SNR(dB): -2.5 | coded BLER (soft): 0.373975 | coded BLER(hard): 0.454293\n",
      "At SNR(dB): -2.0 | coded BLER (soft): 0.334565 | coded BLER(hard): 0.416966\n",
      "At SNR(dB): -1.5 | coded BLER (soft): 0.29465 | coded BLER(hard): 0.378652\n",
      "At SNR(dB): -1.0 | coded BLER (soft): 0.254375 | coded BLER(hard): 0.340119\n",
      "At SNR(dB): -0.5 | coded BLER (soft): 0.215441 | coded BLER(hard): 0.301021\n",
      "At SNR(dB): 0.0 | coded BLER (soft): 0.17943 | coded BLER(hard): 0.261749\n",
      "At SNR(dB): 0.5 | coded BLER (soft): 0.145708 | coded BLER(hard): 0.225524\n",
      "At SNR(dB): 1.0 | coded BLER (soft): 0.114448 | coded BLER(hard): 0.189009\n",
      "At SNR(dB): 1.5 | coded BLER (soft): 0.086905 | coded BLER(hard): 0.154485\n",
      "At SNR(dB): 2.0 | coded BLER (soft): 0.063574 | coded BLER(hard): 0.123722\n",
      "At SNR(dB): 2.5 | coded BLER (soft): 0.045241 | coded BLER(hard): 0.095985\n",
      "At SNR(dB): 3.0 | coded BLER (soft): 0.030357 | coded BLER(hard): 0.072166\n",
      "At SNR(dB): 3.5 | coded BLER (soft): 0.019361 | coded BLER(hard): 0.052022\n",
      "At SNR(dB): 4.0 | coded BLER (soft): 0.011799 | coded BLER(hard): 0.036823\n",
      "At SNR(dB): 4.5 | coded BLER (soft): 0.006764 | coded BLER(hard): 0.024702\n",
      "At SNR(dB): 5.0 | coded BLER (soft): 0.003584 | coded BLER(hard): 0.015639\n",
      "At SNR(dB): 5.5 | coded BLER (soft): 0.001758 | coded BLER(hard): 0.009331\n",
      "At SNR(dB): 6.0 | coded BLER (soft): 0.000827 | coded BLER(hard): 0.005393\n",
      "At SNR(dB): 6.5 | coded BLER (soft): 0.000329 | coded BLER(hard): 0.00284\n",
      "At SNR(dB): 7.0 | coded BLER (soft): 0.000129 | coded BLER(hard): 0.001444\n",
      "At SNR(dB): 7.5 | coded BLER (soft): 4.9e-05 | coded BLER(hard): 0.000658\n",
      "At SNR(dB): 8.0 | coded BLER (soft): 6e-06 | coded BLER(hard): 0.000263\n"
     ]
    }
   ],
   "source": [
    "######################################\n",
    "# (7,4) Hamming code BLER performance\n",
    "######################################\n",
    "\n",
    "SNR  = 10**(snr_dB/10)  # SNR in linear scale\n",
    "\n",
    "codedBLERhard = np.zeros(SNR.shape)\n",
    "codedBLERsoft = np.zeros(SNR.shape)\n",
    "\n",
    "## Symbol Demapping\n",
    "# demapping_method = str(np.random.choice([\"app\", \"maxlog\"]))\n",
    "# hard_out         = bool(np.random.choice([False, True]))\n",
    "demapping_method = \"app\"\n",
    "hard_out         = False\n",
    "\n",
    "demapper         = Demapper(demapping_method, constellation_type, \n",
    "                            num_bits_per_symbol, hard_out = hard_out)\n",
    "\n",
    "\n",
    "snrIndex = 0\n",
    "for snr in SNR:\n",
    "    symbs = symbols + np.sqrt(0.5/R/snr)*(np.random.standard_normal(size=symbols.shape)+1j*np.random.standard_normal(size=symbols.shape)).astype(np.complex64)\n",
    "\n",
    "    llrEst  = demapper([symbs, np.float32(1/snr)])\n",
    "    uncBits = np.where(llrEst > 0, np.int8(1), np.int8(0))\n",
    "        \n",
    "    decoder = HammingDecoder(k,n)\n",
    "    decBits = decoder(uncBits)\n",
    "    \n",
    "    codedBLERhard[snrIndex]= np.mean(np.where(np.sum(np.abs(bits-decBits), axis=1)>0, True, False))\n",
    "    \n",
    "    decoder = HammingDecoder(k,n)\n",
    "    decBits = decoder(llrEst, \"sphereDecoding\")\n",
    "    \n",
    "    codedBLERsoft[snrIndex]= np.mean(np.where(np.sum(np.abs(bits-decBits), axis=1)>0, True, False))\n",
    "    \n",
    "    print(\"At SNR(dB): \"+str(snr_dB[snrIndex])+\" | coded BLER (soft): \"+str(codedBLERsoft[snrIndex])+\" | coded BLER(hard): \"+str(codedBLERhard[snrIndex]))\n",
    "\n",
    "    snrIndex += 1\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0cb491f",
   "metadata": {},
   "source": [
    "### BLER plot : comparison of AutoEncoder BLER with base line (n,k) Hamming Code BLER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "52ddd590",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ploting BLER \n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.semilogy(snr_dB, codedBLERsoft, 'tomato', lw = 3.5, linestyle = (0, (3, 1, 1, 1, 1, 1)), marker = \"s\", ms = 6, mec = \"k\", mfc = \"cyan\", label = \"coded BER [Soft]\")\n",
    "ax.semilogy(snr_dB, codedBLERhard, 'k', lw = 3, linestyle = (0, (3, 1, 1, 1, 1, 1)), marker = \"X\", ms = 9, mec = \"green\", mfc = \"olive\", label = \"coded BER [Hard]\")\n",
    "ax.semilogy(snr_dB, bler, 'y', lw = 3, linestyle = (0, (3, 1, 1, 1, 1, 1)), marker = \"+\", ms = 9, mec = \"blue\", mfc = \"pink\", label = \"AutoEncoder(n,k)\")\n",
    "ax.legend()\n",
    "ax.set_xticks(snr_dB)\n",
    "ax.grid()\n",
    "ax.set_ylabel(\"Block Error Rate\")\n",
    "ax.set_xlabel(\"SNR (dB)\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9413e417",
   "metadata": {},
   "source": [
    "## Constellation Learning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f9718ba",
   "metadata": {},
   "source": [
    "The following cells provide the code to generate and plot the learned constellation by Tx in the presence of AWGN.\n",
    "\n",
    "\n",
    "**Note:** we have to go back to the previous steps to change the values of `N`,`N_test` and `retrain the AE` to plot a constellation for `(7,4) AE` as it uses `TSNE`. For other cases such as (2,4) and (2,2) we can use same `N`,`N_test` for BLER and constellation plots."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a6132943",
   "metadata": {},
   "outputs": [],
   "source": [
    "# #################################################################################\n",
    "# # predicting the learned constellation for a given number of information symbols M\n",
    "# #################################################################################\n",
    "# constellationPoints = transmitter.predict(symbol_encodings)\n",
    "# print(\"\\n\")\n",
    "# print(constellationPoints)\n",
    "# print(\"\\n\")\n",
    "# print(\"Shape of learned constellation:\" + str(constellationPoints.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15777d27",
   "metadata": {},
   "source": [
    "### learned constellation plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "0665a0d5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 31ms/step\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "###################################################################################\n",
    "# plotting learned constellation under energy constraint for (n,k) = (2,4) or (2,2)\n",
    "###################################################################################\n",
    "constellationPoints = transmitter.predict(symbol_encodings)\n",
    "r = np.linalg.norm(constellationPoints[0])\n",
    "theta = np.linspace(0,2*np.pi,200)\n",
    "fig, ax = plt.subplots()\n",
    "ax.scatter(constellationPoints[:,0],constellationPoints[:,1])\n",
    "ax.plot(r*np.cos(theta),r*np.sin(theta), c=\"green\", alpha = 0.1, marker=\".\")\n",
    "plt.axis((-2.5,2.5,-2.5,2.5))\n",
    "plt.grid()\n",
    "plt.xlabel('I Axis')\n",
    "plt.ylabel('Q Axis')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "0d5edc2f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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P368LrjgAmuLM1hpaakWLlyoadOmKS8vT08++aRaW1t15513Wl1a1Pnkk0+0b9++7uOGhgbV1dUpNTVVl112mYWVRZ/FixersrJSr7zyipKSkrrnmKWkpGjEiBEWVxdGATjWmjVrApL6/ELkLVy4sM+2ePPNN60uzXhPPfVU4LLLLgsMHz48kJeXF9i+fbvVJUWlN998s8/3wMKFC60uLer099mwZs0aq0sLK9apAQAARmACBgAAMAKhBgAAGIFQAwAAjECoAQAARiDUAAAAIxBqAACAEQg1AADACIQaAABgBEINgKixaNGi7j2iAJiHFYUBWG7RokU6ffq0Nm7ceN5rJ0yYoIaGBh04cGDQe5y53W4FAgFdeOGFwRUKwNboqQHgGO+8847OnDmj73znO3rhhRcG/f0pKSkEGsBghBoAjrF69WotWLBAd9xxh55//vkej+3du1eJiYmqrKzsPvfnP/9ZI0aMUH19vaTew09/+ctfNGnSJI0YMUIXX3yxZs+erdbW1oi8FgChN8zqAgBgIFpaWvTSSy9px44dmjBhgtxut95++2197Wtfk9Q5LLVq1Srdd999uvbaaxUTE6N7771Xjz32mHJycno9X1NTk2677TY9/vjj+va3v62Wlha9/fbbYkQecC5CDQBHePHFF3X55ZfriiuukCR997vf1erVq7tDjSTdd999eu2111RcXKzhw4dr+vTpWrp0aZ/P19TUpE8//VQ333yzxowZI0maNGlS+F8IgLBh+AmAIzz//PMqLi7uPi4uLtZLL72klpaWXtft2rVLtbW1Wrt2rVwuV5/PN3nyZF1//fWaNGmS5s2bp9///vc6depUWF8DgPAi1ACwvfr6em3fvl0PPvighg0bpmHDhukrX/mK2tra9OKLL/a49t///rdaW1vV2tqqpqamfp8zNjZW1dXVev3115WTk6OnnnpKX/rSl9TQ0BDulwMgTAg1AGxv9erVuu666/Tvf/9bdXV13V+lpaVavXp193XNzc1atGiRHnroIS1atEi33367zpw50+/zulwuffWrX1V5ebl27typ4cOHa8OGDZF4SQDCgDk1AGzN5/PpT3/6kx5++GHl5ub2eOzuu+/WE088oQ8++EBXXHGF7r33XmVlZeknP/mJvF6vvvzlL+tHP/qRnnnmmV7Pu2PHDm3ZskUFBQVKT0/Xjh07dPz4cU2cODFSLw1AiBFqANjaX//6V508eVLf/va3ez02ceJETZw4UatXr9ZVV12l1157TTt37uweolq3bp2uvfZa3XTTTZozZ06P701OTtbWrVv15JNPyuPxaMyYMfrVr37V6zoAzsGKwgAAwAjMqQEAAEYg1AAAACMQagAAgBEINQAAwAiEGgAAYARCDQAAMAKhBgAAGIFQAwAAjECoAQAARiDUAAAAIxBqAACAEf4/cqtndwokodQAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "##########################################################################################\n",
    "# plotting learned constellation under average power constraint for (n,k) = (2,4) or (2,2)\n",
    "##########################################################################################\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.scatter(constellationPoints[:,0],constellationPoints[:,1])\n",
    "plt.axis((-2.5,2.5,-2.5,2.5))\n",
    "plt.grid()\n",
    "plt.xlabel('I Axis')\n",
    "plt.ylabel('Q Axis')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "469b9919",
   "metadata": {},
   "source": [
    "The following code snippet use TSNE to reduce the dimension of constellation for `(n,k) = (7,4)` "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "50d2a0fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ###########################################################################################################\n",
    "# # Using sklearn T-distributed Stochastic Neighbor Embedding (TSNE) to reduce the dimension of constellation\n",
    "# ###########################################################################################################\n",
    "# num_samples = N_test \n",
    "\n",
    "# noise       = noise_stddev*np.random.randn(num_samples,n)\n",
    "# X           = transmitter.predict(test_data)\n",
    "# X_noisy     = X + noise\n",
    "\n",
    "# X_embedded  = TSNE(n_components=2, learning_rate='auto', n_iter = 35000, random_state = 0, perplexity=60).fit_transform(X_noisy)\n",
    "# X_embedded  = X_embedded/n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "2455ed7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ####################################################################################\n",
    "# # plotting higher dimensional received constellation in lower dimensions for (7,4) AE\n",
    "# ####################################################################################\n",
    "# fig, ax = plt.subplots()\n",
    "# ax.scatter(X_embedded[:,0],X_embedded[:,1], marker = \".\")\n",
    "# plt.axis((-2,2,-2,2))\n",
    "# plt.grid()\n",
    "# plt.xlabel('I Axis')\n",
    "# plt.ylabel('Q Axis')\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9736dc12",
   "metadata": {},
   "source": [
    "#### For (n,k) = (2,4) or (2,2) AutoEncoders"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ec1db09",
   "metadata": {},
   "source": [
    "\n",
    "It turns out that under M = 16 and with an `energy constraint`, `(2,4) AE` learns a constellation which resemble `16-ary PSK` and with `power constraint` it learns a constellation which resemble `16-ary APSK`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa4482a6",
   "metadata": {},
   "source": [
    "# References\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a303b219",
   "metadata": {},
   "source": [
    "[1] T. O’Shea and J. Hoydis, \"An Introduction to Deep Learning for the Physical Layer,\" in IEEE Transactions on \n",
    "Cognitive Communications and Networking, vol. 3, no. 4, pp. 563-575, Dec. 2017, doi: 10.1109/TCCN.2017.2758370."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe0cb3b8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
