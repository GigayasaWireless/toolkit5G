{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a6e9b6cb",
   "metadata": {},
   "source": [
    "# Analyzing the effect of Number of Candidates on *Blocking Probability*"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9478370b",
   "metadata": {},
   "source": [
    "* In this notebook, we simulate the `blocking probability` as a function of number of PDCCH candidates.\n",
    "* In NR the number of PDCCH candidates can be configurable for each Aggregation Level (AL) among {1,2,3,4,5,6,8} in the USS.\n",
    "\n",
    "* We seperately evaluate the impact of number of candidates for AL 1, AL 2, and AL 4 by changing the number of candidates for one of the ALs (from the set above), while setting the number of candidates for other ALs to 1.\n",
    "\n",
    "* The AL distribution considered for simulation is [0.4, 0.3, 0.2, 0.05, 0.05] for ALs 1,2,4,8,16 respectively.\n",
    "    \n",
    "* The CORESET size `Nccep` is 54 CCEs for this simulation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e24f807b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"-1\"\n",
    "os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' \n",
    "\n",
    "# %matplotlib widget\n",
    "import matplotlib.pyplot  as plt\n",
    "import matplotlib.patches as mpatches\n",
    "import matplotlib as mpl\n",
    "\n",
    "import numpy      as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2617b9c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "sys.path.append(\"../../\")\n",
    "from toolkit5G.Scheduler import PDCCHScheduler"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf15e1b2",
   "metadata": {},
   "source": [
    "## Simulation Parameters\n",
    "The following parameters are used for this simulation:\n",
    "- `coresetID` denotes the coreset ID.\n",
    "- `slotNumber` denotes the slot-number carrying the PDCCH.\n",
    "- `searchSpaceType` denotes the search space type. UE specific search space (USS) or Common search space (CSS).\n",
    "- `nci` denotes the variable corresponding to carrier aggregation. Current simulation does not assume carrier aggregation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "eb21eb17",
   "metadata": {},
   "outputs": [],
   "source": [
    "mu               = np.random.randint(4)    # numerlogy for sub-carrier spacing\n",
    "numSlotsPerFrame = 2**mu * 10              # number of slots per radio frame\n",
    "coresetID        = 1                       # coreset ID\n",
    "slotNumber       = 0               \n",
    "searchSpaceType  = \"USS\"                   # search space type. UE specific search space\n",
    "nci              = 0                       # variable corresponding to carrier aggregation \n",
    "numIterations    = 5000\n",
    "numUEs           = 20\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b20c66b",
   "metadata": {},
   "source": [
    "## PDCCH Scheduling Parameters\n",
    "Following parameters are crucial for PDCCH scheduling performance:\n",
    "- ``Nccep`` denotes coreset size or number of CCEs available for scheduling UEs.\n",
    "- ``strategy`` denotes the scheduling strategy.\n",
    "- ``numCandidates`` denotes number of PDCCH candidates per each Aggregation Level."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7971487b",
   "metadata": {},
   "outputs": [],
   "source": [
    "aggLevelProbDistribution = np.array([0.4, 0.3, 0.2, 0.05, 0.05])\n",
    "Nccep                    = 54\n",
    "supportedNumCand         = np.array([1,2,3,4,5,6,7,8], dtype = int)\n",
    "strategy                 = \"Conservative\" \n",
    "\n",
    "pdcchSchedulerObj = PDCCHScheduler(mu, slotNumber, coresetID, nci)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6a13436a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Simulating number of candidates : 0, 1\n",
      "Simulating number of candidates : 1, 2\n",
      "Simulating number of candidates : 2, 3\n",
      "Simulating number of candidates : 3, 4\n",
      "Simulating number of candidates : 4, 5\n",
      "Simulating number of candidates : 5, 6\n",
      "Simulating number of candidates : 6, 7\n",
      "Simulating number of candidates : 7, 8\n"
     ]
    }
   ],
   "source": [
    "#########\n",
    "# AL1\n",
    "#########\n",
    "\n",
    "probOfBlockingForAL1 = np.zeros((supportedNumCand.size,))\n",
    "for n in range(supportedNumCand.size):\n",
    "    print(\"Simulating number of candidates : \"+str(n)+\", \"+str(supportedNumCand[n]))\n",
    "    x = supportedNumCand[n]\n",
    "    numCandidates  = np.array([x,1,1,1,1], dtype=int)\n",
    "    prob = 0\n",
    "    for i in range(numIterations): \n",
    "        ueALdistribution  = np.random.multinomial(numUEs, aggLevelProbDistribution) \n",
    "        rnti              = np.random.choice( np.arange(1,65519+1), size = (numUEs,), replace=False)\n",
    "        count             = pdcchSchedulerObj(Nccep,searchSpaceType,ueALdistribution,numCandidates,rnti,strategy)[0]\n",
    "        numBlockedUEs     = np.sum(count)\n",
    "        prob              = prob + numBlockedUEs/numUEs\n",
    "    probOfBlockingForAL1[n] = prob/numIterations\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f32cdecd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Simulating number of candidates : 0, 1\n",
      "Simulating number of candidates : 1, 2\n",
      "Simulating number of candidates : 2, 3\n",
      "Simulating number of candidates : 3, 4\n",
      "Simulating number of candidates : 4, 5\n",
      "Simulating number of candidates : 5, 6\n",
      "Simulating number of candidates : 6, 7\n",
      "Simulating number of candidates : 7, 8\n"
     ]
    }
   ],
   "source": [
    "#########\n",
    "# AL2\n",
    "#########\n",
    "probOfBlockingForAL2 = np.zeros((supportedNumCand.size,))\n",
    "for n in range(supportedNumCand.size):\n",
    "    print(\"Simulating number of candidates : \"+str(n)+\", \"+str(supportedNumCand[n]))\n",
    "    x = supportedNumCand[n]\n",
    "    numCandidates  = np.array([1,x,1,1,1], dtype=int)\n",
    "    prob = 0\n",
    "    for i in range(numIterations): \n",
    "        ueALdistribution  = np.random.multinomial(numUEs, aggLevelProbDistribution) \n",
    "        rnti              = np.random.choice( np.arange(1,65519+1), size = (numUEs,), replace=False)\n",
    "        count             = pdcchSchedulerObj(Nccep,searchSpaceType,ueALdistribution,numCandidates,rnti,strategy)[0]\n",
    "        numBlockedUEs     = np.sum(count)\n",
    "        prob              = prob + numBlockedUEs/numUEs\n",
    "    probOfBlockingForAL2[n] = prob/numIterations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b99cff84",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Simulating number of candidates : 0, 1\n",
      "Simulating number of candidates : 1, 2\n",
      "Simulating number of candidates : 2, 3\n",
      "Simulating number of candidates : 3, 4\n",
      "Simulating number of candidates : 4, 5\n",
      "Simulating number of candidates : 5, 6\n",
      "Simulating number of candidates : 6, 7\n",
      "Simulating number of candidates : 7, 8\n"
     ]
    }
   ],
   "source": [
    "#########\n",
    "# AL4\n",
    "#########\n",
    "probOfBlockingForAL4 = np.zeros((supportedNumCand.size,))\n",
    "for n in range(supportedNumCand.size):\n",
    "    print(\"Simulating number of candidates : \"+str(n)+\", \"+str(supportedNumCand[n]))\n",
    "    x = supportedNumCand[n]\n",
    "    numCandidates  = np.array([1,1,x,1,1], dtype=int)\n",
    "    prob = 0\n",
    "    for i in range(numIterations): \n",
    "        ueALdistribution  = np.random.multinomial(numUEs, aggLevelProbDistribution) \n",
    "        rnti              = np.random.choice( np.arange(1,65519+1), size = (numUEs,), replace=False)\n",
    "        count             = pdcchSchedulerObj(Nccep,searchSpaceType,ueALdistribution,numCandidates,rnti,strategy)[0]\n",
    "        numBlockedUEs     = np.sum(count)\n",
    "        prob              = prob + numBlockedUEs/numUEs\n",
    "    probOfBlockingForAL4[n] = prob/numIterations"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f37d863",
   "metadata": {},
   "source": [
    "## Plot the Variation in Blocking Probability with number of PDCCH candidates\n",
    "\n",
    "* Its the recreation of ``Fig. 6: Blocking probability versus Number of PDCCH candidates``from the           reference   paper referenced below [1].\n",
    "\n",
    "\n",
    "* From the figure we see that incresing the number of PDCCH candidates for each AL results in a lower Blocking Probability.\n",
    "\n",
    "\n",
    "* With more PDCCH candidates, the Base Station has more flexibility to avoid overlapping between candidates of different UEs, thus reducing the blocking probability.\n",
    "\n",
    "\n",
    "\n",
    "* The results in figure shows that a higher blocking probability reduction for AL 2, compared to ALs 1 and 4. This is because of the AL distribution considered. We see the overall impact of AL 2 on the blocking probability is more than that of ALs 1 and 4.\n",
    "\n",
    "\n",
    "\n",
    "* Note that having more PDCCH candidates is beneficial for blocking probaility reduction, it increases the number of BDs and CCE monitoring which can increase the UE complexity and power consumption."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "54bd440e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.plot(supportedNumCand, probOfBlockingForAL1, marker  = \"*\",linestyle = \"solid\",ms = 12, c = 'b', label = \"AL1\")\n",
    "ax.plot(supportedNumCand, probOfBlockingForAL2, marker  = \"o\",linestyle = \"solid\",ms = 12, c = 'm', label = \"AL2\")\n",
    "ax.plot(supportedNumCand, probOfBlockingForAL4, marker  = \"+\",linestyle = \"solid\",ms = 12, c = 'k', label = \"AL4\")\n",
    "\n",
    "ax.legend()\n",
    "ax.set_xlabel('Number of PDCCH Candidates for an AL')\n",
    "ax.set_ylabel('Blocking Probability')\n",
    "ax.set_title('Blocking Probability vs Number of PDCCH Candidates', fontsize=12) \n",
    "ax.set_xticks(supportedNumCand)\n",
    "ax.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a174fc2",
   "metadata": {},
   "source": [
    "## References"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e22e5838",
   "metadata": {},
   "source": [
    "[1] `Blocking Probability Analysis for 5G New Radio (NR) Physical Downlink Control Channel`. Mohammad Mozaffari,\n",
    "      Y.-P. Eric Wang, and Kittipong Kittichokechai"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9da81f1f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
