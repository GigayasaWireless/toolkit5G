{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "85fbd76a",
   "metadata": {},
   "source": [
    "# Initial Access in 5G\n",
    "This tutorial will introduce the audience to initial access procedure and downlink synchronization in 5G networks. The initial access incapsulate the following components:\n",
    "\n",
    "- Master Information Block (MIB)\n",
    "- Physical Broadcast Channel (PBCH)\n",
    "- Synchronization Signal Block (SSB):\n",
    "    - Primary Synchronization Signal (PSS)\n",
    "    - Secondary Synchronization Signal (SSS)\n",
    "    - PBCH payload\n",
    "    - Demodulation Reference Signal (DMRS) for PBCH\n",
    "- Time Synchronization\n",
    "- Frequency Synchronization\n",
    "\n",
    "This content covers following topics:\n",
    "\n",
    "- [Import Libraries](#Import-Libraries)\n",
    "    - [External Libaries](#External-Libaries)\n",
    "    - [5G Toolkit Modules](#5G-Toolkit-Modules)\n",
    "- [System Parameters](#System-Parameters)\n",
    "- [PBCH Information](#PBCH-Information)\n",
    "- [Transmission-side Processing](#Transmission-side-Processing)\n",
    "    - [Generate Primary Synchronization Sequence](#Generate-Primary-Synchronization-Sequence)\n",
    "    - [Generate Secondary Synchronization Sequence (SSS)](#Generate-Secondary-Synchronization-Sequence-(SSS))\n",
    "    - [Generate Demodulation Reference Sequence (DMRS)](#Generate-Demodulation-Reference-Sequence-(DMRS))\n",
    "    - [Generate the PBCH Payload](#Generate-the-PBCH-Payload)\n",
    "    - [Construct SSB Grid](#Construct-SSB-Grid)\n",
    "    - [Mapping SSB to Transmission Grid for ODFM](#Mapping-SSB-to-Transmission-Grid-for-ODFM)\n",
    "    - [OFDM Modulator](#OFDM-Modulator)\n",
    "    - [Analog Beamforming](#Analog-Beamforming)\n",
    "- [Channel Generation](#Channel-Generation)\n",
    "- [Pass Tx signal through Wireless Channel](#Pass-Tx-signal-through-Wireless-Channel)\n",
    "- [Noise addition at receiver](#Noise-addition-at-receiver)\n",
    "- [SSB Receiver Side](#SSB-Receiver-Side)\n",
    "    - [Receiver combining](#Receiver-combining)\n",
    "    - [PSS Detection: largest peak](#PSS-Detection:-largest-peak)\n",
    "    - [Largest peak](#Largest-peak)\n",
    "    - [OFDM Demodulation: Resource Grid reconstruction](#OFDM-Demodulation-Resource-Grid-reconstruction)\n",
    "    - [SSB Extaction from Resource Grid](#SSB-Extaction-from-Resource-Grid)\n",
    "    - [Extracted SSB](#Extracted-SSB)\n",
    "    - [Comparing Transmitted and Received SSB Grid](#Comparing-Transmitted-and-Received-SSB-Grid)\n",
    "    - [Spectrum Analysis](#Spectrum-Analysis)\n",
    "    - [(SSS Detection: PSS channel assisted) + Cell-ID estimation](#(SSS-Detection:-PSS-channel-assisted)-+-Cell-ID-estimation)\n",
    "    - [DMRS Parameters Detection + DMRS Sequence Generation](#DMRS-Parameters-Detection-+-DMRS-Sequence-Generation)\n",
    "    - [Channel Estimation and PBCH Symbol Equalization](#Channel-Estimation-and-PBCH-Symbol-Equalization)\n",
    "    - [PBCH Decoding](#PBCH-Decoding)\n",
    "    - [Information Aggregation](#Information-Aggregation)\n",
    "- [Performance Evaluations: BER + Cell-IDs + DMRS Parameter Detection](#Performance-Evaluations:-BER-+-Cell-IDs-+-DMRS-Parameter-Detection)\n",
    "    - [Cell-IDs Detection](#Cell-IDs-Detection)\n",
    "    - [DMRS Parameter Detection](#DMRS-Parameter-Detection)\n",
    "    - [BER computation](#BER-computation)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "699cad6c",
   "metadata": {},
   "source": [
    "## Import Libraries\n",
    "### External Libaries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "135ef70d",
   "metadata": {
    "raw_mimetype": "text/x-python"
   },
   "outputs": [],
   "source": [
    "%matplotlib widget\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import os\n",
    "os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"-1\"\n",
    "os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' \n",
    "\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50b22bb2",
   "metadata": {},
   "source": [
    "### 5G Toolkit Modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "730e7398",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from toolkit5G.SequenceGeneration import PSS, SSS, DMRS\n",
    "from toolkit5G.PhysicalChannels   import PBCH, PBCHDecoder\n",
    "from toolkit5G.ResourceMapping    import SSB_Grid, ResourceMapperSSB\n",
    "from toolkit5G.ChannelModels      import AntennaArrays, SimulationLayout, ParameterGenerator, ChannelGenerator\n",
    "from toolkit5G.OFDM               import OFDMModulator, OFDMDemodulator\n",
    "from toolkit5G.ChannelProcessing  import ApplyChannel, AddNoise\n",
    "from toolkit5G.MIMOProcessing     import AnalogBeamforming, ReceiveCombining\n",
    "from toolkit5G.ReceiverAlgorithms import PSSDetection, SSSDetection, ChannelEstimationAndEqualization, DMRSParameterDetection\n",
    "from toolkit5G.Configurations     import TimeFrequency5GParameters, GenerateValidSSBParameters\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9008487",
   "metadata": {},
   "source": [
    "## System Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9440837b",
   "metadata": {},
   "outputs": [],
   "source": [
    "## System Parameters\n",
    "carrierFrequency = 3.6*10**9        # Carrier frequency 3.6 GHz\n",
    "scs         = 30*(10**3);           # Subcarrier spacing for simulation\n",
    "bandwidthTx = 10*(10**6);           # Transmission bandwidth\n",
    "nSymbolFrame= 140*int(scs/15000);   # Number of OFDM symbols per frame (Its a function of subcarrier spacing)\n",
    "\n",
    "## This class fetches valid set of 5G parameters for the system configurations \n",
    "tfParams    = TimeFrequency5GParameters(bandwidthTx, scs)\n",
    "tfParams(nSymbolFrame, typeCP = \"normal\")\n",
    "nRB         = tfParams.N_RB        # SSB Grid size (Number of RBs considered for SSB transition)\n",
    "Neff        = tfParams.Neff        # Number of resource blocks for Resource Grid ( exclude gaurd band | offsets : BWP)\n",
    "Nfft        = 512                 # FFT-size for OFDM\n",
    "lengthCP    = tfParams.lengthCP    # CP length\n",
    "#___________________________________________________________________\n",
    "\n",
    "## Number of batches | Number of Transmitter | Number of Receivers | \n",
    "## Number of Symbols | Number of Tx-Antennas | Number of Rx-Antennas\n",
    "numUEs      = 1      # Number of UE condsidered for Simulation\n",
    "Nr_x        = 2      # Number of antennas placed Horizontally at Receiver (2D Antenna Panels)\n",
    "Nr_y        = 2      # Number of antennas placed Vertically   at Receiver (2D Antenna Panels)\n",
    "Pr          = 2      # Polarization of Receiver antennas\n",
    "\n",
    "numBSs      = 1      # Number of BSs condsidered for Simulation\n",
    "Nt_x        = 8      # Number of antennas placed Horizontally at Transmitter (2D Antenna Panels)\n",
    "Nt_y        = 8      # Number of antennas placed Vertically   at Transmitter (2D Antenna Panels)\n",
    "Pt          = 2      # Polarization of Transmitter antennas\n",
    " \n",
    "nBatch      = 1      # Number of Batches considerd for Simulations (Similar to Monte-carlo)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7482f6d5",
   "metadata": {},
   "source": [
    "## PBCH Information\n",
    "PBCH information consists of MIB and Additional Timing Information (ATI)\n",
    "\n",
    "|Parameters | Defining | MIB | ATI\n",
    "| :--- | :--- | :--- | :---\n",
    "|systemFrameNumber | SFN Consists of 10 Bits and the 6 most significant bits (MSB) of the 10-bit System Frame Number (SFN) are defined in MIB. | 6 | 4\n",
    "|subCarrierSpacingCommon | subcarrier spacing for SIB1, Msg2, Msg4 for initial access, paging, and broadcast SI-messages.| 1 | 0 \n",
    "|ssbSubCarrierOffset | Frequency domain offset between SSB and the overall resource block grid in number of subcarriers | 4-5 | 0 \n",
    "|DMRSTypeAPosition | Indicates the position of (first) DM-RS for downlink and uplink when using ‘Mapping Type A’ | 1 | 0\n",
    "|controlResourceSet0 | Determines a common ControlResourceSet (CORESET), a common search space and necessary PDCCH parameters. | 4 | 0 \n",
    "|searchSpace0 | Indicates that SIB1 is present, the field pdcch-ConfigSIB1 indicates the frequency positions where the UE may find SS/PBCH block with SIB1. | 4 | 0 \n",
    "|cellBarred | Indicates whether the current cell is barred. This field is ignored by IAB-MT. In LTE this information was provided in SIB1 | 1 | 0\n",
    "|intraFrequencyReselection | Controls cell selection/reselection to intra-frequency cells when the highest ranked cell is barred, or treated as barred by the UE. | 1 | 0\n",
    "|SSB Index | Indicates the index of the SSB in the group of $\\text{L}_\\text{max}$ SSBs transmitted in a half frame. | 0-3 | 0\n",
    "|Spare Bit | Unused | 1 | 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "822e2d85",
   "metadata": {},
   "outputs": [],
   "source": [
    "lamda                           = 3e8/carrierFrequency;\n",
    "nSCSOffset                      = 1\n",
    "ssbParameters                   = GenerateValidSSBParameters(carrierFrequency, nSCSOffset)\n",
    "\n",
    "systemFrameNumber               = ssbParameters.systemFrameNumber \n",
    "subCarrierSpacingCommon         = ssbParameters.subCarrierSpacingCommon \n",
    "ssbSubCarrierOffset             = ssbParameters.ssbSubCarrierOffset \n",
    "DMRSTypeAPosition               = ssbParameters.DMRSTypeAPosition \n",
    "controlResourceSet0             = ssbParameters.controlResourceSet0\n",
    "searchSpace0                    = ssbParameters.searchSpace0\n",
    "\n",
    "isPairedBand                    = ssbParameters.isPairedBand\n",
    "nSCSOffset                      = ssbParameters.nSCSOffset \n",
    "choiceBit                       = ssbParameters.choiceBit \n",
    "ssbType                         = ssbParameters.ssbType \n",
    "nssbCandidatesInHrf             = ssbParameters.nssbCandidatesInHrf\n",
    "ssbIndex                        = ssbParameters.ssbIndex\n",
    "hrfBit                          = ssbParameters.hrfBit \n",
    "cellBarred                      = ssbParameters.cellBarred \n",
    "intraFrequencyReselection       = ssbParameters.intraFrequencyReselection \n",
    "withSharedSpectrumChannelAccess = ssbParameters.withSharedSpectrumChannelAccess\n",
    "\n",
    "nFrames                         = 0.5\n",
    "Nsc_ssb                         = 240\n",
    "Nsymb_ssb                       = 4\n",
    "#_______________________________________"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3014db6",
   "metadata": {},
   "source": [
    "## Transmission-side Processing\n",
    "- Generate the PSS\n",
    "- Generate the SSS\n",
    "- Generate the PBCH\n",
    "- Generate the DMRS-PBCH\n",
    "- Load the above information into **Synchronization Signal Block** (SSB)\n",
    "- Insert the SSB into Resource Grid\n",
    "- Load Resource Grid into Transmission Grid\n",
    "- **OFDM** Modulation\n",
    "- **Analog Beamforming**\n",
    "\n",
    "\n",
    "| |\n",
    "|:--:| \n",
    "| |\n",
    "| ![SSB Tranmitter side](images/PBCHTransmitter.png)| \n",
    "| *Transmitter side implementation of SSB*|\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2a5bf87",
   "metadata": {},
   "source": [
    "### Generate Primary Synchronization Sequence (PSS)\n",
    "- Inputs: Cell ID-2 ($\\text{N}_\\text{ID}^\\text{2}$): ``N_ID2``\n",
    "- Object for generating PSS sequence: ``pssObject``\n",
    "- PSS Sequence: ``pssSequence``"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8b69606d",
   "metadata": {},
   "outputs": [],
   "source": [
    "N_ID2        = np.random.randint(3)\n",
    "\n",
    "# Generate PSS sequence\n",
    "pssObject    = PSS(N_ID2);\n",
    "pssSequence  = pssObject()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7993b54",
   "metadata": {},
   "source": [
    "### Generate Secondary Synchronization Sequence (**SSS**)\n",
    "- Inputs: \n",
    "    - Cell ID-1 ($\\text{N}_\\text{ID}^\\text{1}$): ``N_ID1``\n",
    "    - Cell ID-2 ($\\text{N}_\\text{ID}^\\text{2}$): ``N_ID2``\n",
    "- Object for generating SSS sequence: ``sssObject``\n",
    "- PSS Sequence: ``sssSequence``"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "769002ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "N_ID1        = np.random.randint(336)\n",
    "N_ID         = 3*N_ID1 + N_ID2\n",
    "\n",
    "# Generate SSS sequence\n",
    "sssObject    = SSS(N_ID1, N_ID2);\n",
    "sssSequence  = sssObject()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acb95322",
   "metadata": {},
   "source": [
    "### Generate Demodulation Reference Sequence (**DMRS**)\n",
    "- Inputs: \n",
    "    - Cell ID ($\\text{N}_\\text{ID} = 3 \\times \\text{N}_\\text{ID}^\\text{1} + \\text{N}_\\text{ID}^\\text{2}$): ``N_ID``\n",
    "    - SSB Index ($\\text{i}_\\text{SSB}$): ``ssbIndex``\n",
    "    - Maximum SSBs in a half frame ($\\text{L}_\\text{max}$): ``nssbCandidatesInHrf``\n",
    "    - Half frame bit ($\\text{n}_\\text{HF}$): ``hrfBit``\n",
    "- Object for generating DMRS sequence: ``dmrsObject``\n",
    "- DMRS Sequence: ``dmrsSequence``"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c4067fac",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate DMRS sequence\n",
    "dmrsLen      = 144;\n",
    "dmrsObject   = DMRS(\"PBCH\", N_ID, ssbIndex, nssbCandidatesInHrf, hrfBit)\n",
    "# dmrsSeq = dmrs.getSequence(\"tensorflow\")\n",
    "dmrsSequence = dmrsObject(dmrsLen)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d45d1136",
   "metadata": {},
   "source": [
    "### Generate the PBCH Payload\n",
    "- Inputs: \n",
    "    - Carrier frequency ($f_c$):``carrierFrequency``\n",
    "    - Choice bit: ``choiceBit``\n",
    "    - Subcarrier spacing common ($\\Delta f$): ``subCarrierSpacingCommon``\n",
    "    - DMRS TypeA-Position: ``DMRSTypeAPosition``\n",
    "    - Control ResourceSet0: ``controlResourceSet0``\n",
    "    - Search Space0: ``searchSpace0``\n",
    "    - cell Barred flag: ``cellBarred``\n",
    "    - intraFrequencyReselection: ``intraFrequencyReselection``\n",
    "    - System Frame Number: ``systemFrameNumber``\n",
    "    - ssbSubCarrierOffset ($k_{ssb}$): ``ssbSubCarrierOffset``\n",
    "    - Half frame bit ($\\text{n}_\\text{HF}$): ``hrfBit``\n",
    "    - SSB Index ($\\text{i}_\\text{SSB}$): ``ssbIndex``\n",
    "    - Cell ID ($\\text{N}_\\text{ID}$): ``N_ID``\n",
    "    - Maximum SSBs in a half frame ($\\text{L}_\\text{max}$): ``nssbCandidatesInHrf``\n",
    "- Object for generating PBCH symbols: ``pbchObject``\n",
    "- PBCH symbols: ``pbchSymbols``\n",
    "\n",
    "Implementation of PBCH is detailed below:\n",
    "\n",
    "\n",
    "![](images/PBCHChain.svg)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "72ecc23d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate PBCH symbols\n",
    "pbchObject   = PBCH(carrierFrequency, choiceBit, subCarrierSpacingCommon, DMRSTypeAPosition, \n",
    "                   controlResourceSet0, searchSpace0, cellBarred, intraFrequencyReselection,\n",
    "                   systemFrameNumber, ssbSubCarrierOffset, hrfBit, ssbIndex, N_ID, \n",
    "                   nssbCandidatesInHrf)\n",
    "\n",
    "pbchSymbols  = pbchObject()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf7cc230",
   "metadata": {},
   "source": [
    "## Constellation Diagram: Tx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "69b27c9e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.scatter(np.real(pbchSymbols), np.imag(pbchSymbols))\n",
    "ax.grid()\n",
    "ax.axhline(y=0, ls=\":\", c=\"k\")\n",
    "ax.axvline(x=0, ls=\":\", c=\"k\")\n",
    "ax.set_xlabel(\"Real {x}\")\n",
    "ax.set_ylabel(\"Imag {x}\")\n",
    "ax.set_title(\"Constellation Diagram: QPSK\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "762d6280",
   "metadata": {},
   "source": [
    "### Construct SSB Grid\n",
    "- Parameters: \n",
    "    - Cell ID ($\\text{N}_\\text{ID}$): ``N_ID``\n",
    "- Object for generating PBCH symbols: ``ssbObject``\n",
    "    - Inputs\n",
    "        - pssSequence, \n",
    "        - sssSequence, \n",
    "        - dmrsSequence, \n",
    "        - pbchSymbols\n",
    "- PBCH symbols: ``ssb``"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1f734110",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ssbObject    = SSB_Grid(N_ID, True)\n",
    "ssb          = ssbObject(pssSequence, sssSequence, dmrsSequence, pbchSymbols)\n",
    "fig = ssbObject.displayGrid(option=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86da6ee1",
   "metadata": {},
   "source": [
    "### Mapping SSB to Transmission Grid for ODFM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f4fa53c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Loading SSB to SSB Grid\n",
    "#####################################\n",
    "# ssbPositionInBurst = np.ones(nssbCandidatesInHrf, dtype=int)\n",
    "ssbPositionInBurst    = np.zeros(nssbCandidatesInHrf, dtype=int)\n",
    "ssbPositionInBurst[0] = 1 \n",
    "\n",
    "ssbRGobject = ResourceMapperSSB(ssbType=ssbType, carrierFrequency = carrierFrequency, N_RB=nRB,\n",
    "                              kssb=int(ssbSubCarrierOffset), offsetToPointA = int(nRB*0.5-10),\n",
    "                              scsCarrier = subCarrierSpacingCommon,\n",
    "                              ssbPositionInBurst = ssbPositionInBurst, ssbPeriodicity = None, nHF=None,\n",
    "                              nFrames = 0.1*nFrames, isPairedBand = isPairedBand, \n",
    "                              withSharedSpectrumChannelAccess = withSharedSpectrumChannelAccess)\n",
    "\n",
    "ssbGrid     = ssbRGobject(ssb[0])\n",
    "\n",
    "\n",
    "## Loading SSB to Resource Grid\n",
    "numofGuardCarriers = (int((Nfft - Neff)/2), int((Nfft - Neff)/2))\n",
    "offsetToPointA     = 0\n",
    "firstSCIndex       = int(numofGuardCarriers[0] + offsetToPointA)\n",
    "numOFDMSymbols     = ssbRGobject.numSymbols\n",
    "\n",
    "X = np.zeros((numOFDMSymbols, Nfft), dtype= np.complex64)\n",
    "X[:, firstSCIndex:firstSCIndex+ssbGrid.shape[-1]] = ssbGrid\n",
    "\n",
    "# Plot Resource Grid\n",
    "#################################################################\n",
    "fig, ax = plt.subplots()\n",
    "plt.imshow(np.abs(X), cmap = 'hot', interpolation='nearest', aspect = \"auto\")\n",
    "ax = plt.gca();\n",
    "ax.grid(color='c', linestyle='-', linewidth=1)\n",
    "# Gridlines based on minor ticks\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f08e7b9",
   "metadata": {},
   "source": [
    "### OFDM-Modulator\n",
    "OFDM Modulator process the transmission grid column by column and performs following operations on each column:\n",
    "- Fetch a column of the transmission grid\n",
    "    - Size of each column is $\\text{N}_\\text{FFT}$.\n",
    "- IFFT Shift\n",
    "- IFFT Transform\n",
    "- Add cyclic prefix\n",
    "\n",
    "![OFDMModulator](images/OFDM_Tx.svg)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0b8801fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "## OFDM Modulation at Transmitter\n",
    "#####################################\n",
    "modulator = OFDMModulator(lengthCP[1])\n",
    "x_time    = modulator(X)[np.newaxis, np.newaxis, np.newaxis, ...]\n",
    "#______________________________________________________"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "580b2ea3",
   "metadata": {},
   "source": [
    "### Analog Beamforming\n",
    "- Input\n",
    "    - Beamforming Direction ($\\theta, \\phi$): ``bfAngle``\n",
    "    - Transmit Power, $P_t$ (dBm): ``Pt_dBm``\n",
    "    - Transmit Signal, $x(t)$: ``x_time``\n",
    "- Analog Beamformer Object: ``aBF``\n",
    "- Output:\n",
    "    - Beamformed Signal: ``x_Beam``"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "883de63b",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Analog Beamforming at Transmitter\n",
    "#####################################\n",
    "# Beamforming Parameters\n",
    "# Number of antennas for Beamforming\n",
    "# Beamforming angles\n",
    "\n",
    "# Total Transmit Power\n",
    "Pt_dBm = 43;  # dBm\n",
    "Pt_a   = 10**((Pt_dBm-30)/10)\n",
    "bfAngle= np.array([0, 0])\n",
    "\n",
    "# nSymbforScheduling = startOFDMSymbolIndices[-1]*Nfft;\n",
    "nSymbforScheduling = x_time.shape[-1]\n",
    "\n",
    "x_Beam = np.zeros([x_time.shape[0], x_time.shape[1], Nt_x*Nt_y*Pt, \n",
    "                   nSymbforScheduling], dtype = np.complex64)\n",
    "\n",
    "isCustomBeamformer = False\n",
    "aBF                = AnalogBeamforming(carrierFrequency, isCustomBeamformer)\n",
    "for nbatch in range(x_time.shape[0]):\n",
    "    for ntx in range(x_time.shape[1]):\n",
    "        x_Beam[nbatch, ntx, :, :] = aBF(x_time[nbatch][ntx][:,:], Pt_dBm, bfAngle,\n",
    "                                        np.array([lamda/2, lamda/2]), np.array([Nt_x, Nt_y, Pt]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "793d29a1",
   "metadata": {},
   "source": [
    "## Channel Generation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "cc64b71a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "*****************************************************\n",
      "                   Terrain: UMa\n",
      "             Number of UEs: 1\n",
      "             Number of BSs: 1\n",
      "*****************************************************\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             Number of BSs: 1\n",
      "          Shape of Channel: (1, 1, 1, 1, 512, 8, 128)\n",
      "*****************************************************\n",
      "\n"
     ]
    }
   ],
   "source": [
    "propTerrain      = \"UMa\"       # Propagation Scenario or Terrain for BS-UE links\n",
    "\n",
    "print()\n",
    "print(\"*****************************************************\")\n",
    "print(\"                   Terrain: \"+str(propTerrain))\n",
    "print(\"             Number of UEs: \"+str(numUEs))\n",
    "print(\"             Number of BSs: \"+str(numBSs))\n",
    "print(\"*****************************************************\")\n",
    "print()\n",
    "\n",
    "# Antenna Array at UE side\n",
    "# assuming antenna element type to be \"OMNI\"\n",
    "# with 2 panel and 2 single polarized antenna element per panel.\n",
    "ueAntArray = AntennaArrays(antennaType = \"OMNI\",  centerFrequency = carrierFrequency, arrayStructure  = np.array([1, 1, Nr_x, Nr_y, Pr]))\n",
    "ueAntArray()\n",
    "\n",
    "# # Radiation Pattern of Rx antenna element \n",
    "# ueAntArray.displayAntennaRadiationPattern()\n",
    "\n",
    "\n",
    "# Antenna Array at BS side\n",
    "# assuming antenna element type to be \"3GPP_38.901\", a parabolic antenna \n",
    "# with 4 panel and 4 single polarized antenna element per panel.\n",
    "bsAntArray = AntennaArrays(antennaType = \"3GPP_38.901\", centerFrequency = carrierFrequency, arrayStructure  = np.array([1, 1, Nt_x, Nt_y, Pt]))\n",
    "bsAntArray()\n",
    "    \n",
    "# # Radiation Pattern of Tx antenna element \n",
    "# bsAntArray[0].displayAntennaRadiationPattern()\n",
    "\n",
    "# Layout Parameters\n",
    "isd                  = 100        # inter site distance\n",
    "minDist              = 10          # min distance between each UE and BS \n",
    "ueHt                 = 1.5         # UE height\n",
    "bsHt                 = 25          # BS height\n",
    "bslayoutType         = \"Hexagonal\" # BS layout type\n",
    "ueDropType           = \"Hexagonal\" # UE drop type\n",
    "htDist               = \"equal\"     # UE height distribution\n",
    "ueDist               = \"equal\"     # UE Distribution per site\n",
    "nSectorsPerSite      = 1           # number of sectors per site\n",
    "maxNumFloors         = 1           # Max number of floors in an indoor object\n",
    "minNumFloors         = 1           # Min number of floors in an indoor object\n",
    "heightOfRoom         = 3           # height of room or ceiling in meters\n",
    "indoorUEfract        = 0.5         # Fraction of UEs located indoor\n",
    "lengthOfIndoorObject = 3           # length of indoor object typically having rectangular geometry \n",
    "widthOfIndoorObject  = 3           # width of indoor object\n",
    "# forceLOS             = True       # boolen flag if true forces every link to be in LOS state\n",
    "forceLOS             = False       # boolen flag if true forces every link to be in LOS state\n",
    "\n",
    "# simulation layout object                                 \n",
    "simLayoutObj = SimulationLayout(numOfBS = numBSs,\n",
    "                                numOfUE = numUEs,\n",
    "                                heightOfBS = bsHt,\n",
    "                                heightOfUE = ueHt, \n",
    "                                ISD = isd,\n",
    "                                layoutType = bslayoutType,\n",
    "                                ueDropMethod = ueDropType, \n",
    "                                UEdistibution = ueDist,\n",
    "                                UEheightDistribution = htDist,\n",
    "                                numOfSectorsPerSite = nSectorsPerSite,\n",
    "                                ueRoute = None)\n",
    "\n",
    "simLayoutObj(terrain = propTerrain, \n",
    "             carrierFreq = carrierFrequency, \n",
    "             ueAntennaArray = ueAntArray,\n",
    "             bsAntennaArray = bsAntArray,\n",
    "             indoorUEfraction = indoorUEfract,\n",
    "             lengthOfIndoorObject = lengthOfIndoorObject,\n",
    "             widthOfIndoorObject = widthOfIndoorObject,\n",
    "             forceLOS = forceLOS)\n",
    "\n",
    "# displaying the topology of simulation layout\n",
    "fig, ax = simLayoutObj.display2DTopology()\n",
    "\n",
    "paramGen = simLayoutObj.getParameterGenerator()\n",
    "\n",
    "# paramGen.displayClusters((0,0,0), rayIndex = 0)\n",
    "channel = paramGen.getChannel()\n",
    "Hf      = channel.ofdm(scs, Nfft)\n",
    "htime   = np.fft.ifft(Hf, norm=\"ortho\", n=Nfft, axis = -3)\n",
    "\n",
    "Nt        = bsAntArray.numAntennas # Number of BS Antennas\n",
    "Nr        = ueAntArray.numAntennas\n",
    "\n",
    "print(\"             Number of BSs: \"+str(numBSs))\n",
    "print(\"          Shape of Channel: \"+str(htime.shape))\n",
    "print(\"*****************************************************\")\n",
    "print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1abdefda",
   "metadata": {},
   "source": [
    "## Pass Tx signal through Wireless Channel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6de751db",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Channel Dimensions: numBatches, numFrequencies, numSymbols(numSnapshots), numBSs, numUEs, numSamples/numFFTpoints, numRxAntennas, numTxAntennas\n",
    "# Tx-Grid Dimensions: numBatches, numFrequencies, numSymbols(numSnapshots), numBSs,         numSamples/numFFTpoints,                numTxAntennas\n",
    "# Rx-Grid Dimensions: numBatches, numFrequencies, numSymbols(numSnapshots),   --    numUEs, numSamples/numFFTpoints, numRxAntennas\n",
    "ptc = ApplyChannel(isFrequencyDomain = False, enableInterTxInterference = True, memoryConsumptionLevel = 4)\n",
    "y   = ptc(htime[np.newaxis], x_Beam.transpose(0,1,3,2)[np.newaxis, np.newaxis])\n",
    "# returns y of shape: numBatch x numFreq x numSnapshots x numUEs x numSamples x numRxAntennas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d112a3fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 1, 1, 1, 5103, 8)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c47d048",
   "metadata": {},
   "source": [
    "## Noise addition at receiver "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0ce9ac9f",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Noise added by the Receiver\n",
    "k_Bolt         = 1.380649*(10**(-23));\n",
    "Temp           = 300;\n",
    "Bandwidth      = Nsc_ssb*scs;\n",
    "n0             = k_Bolt*Temp*Bandwidth\n",
    "kppm           = 0\n",
    "fCFO           = kppm*(np.random.rand()-0.5)*carrierFrequency*(10**(-6)); # fCFO = CFO*subcarrierSpacing\n",
    "CFO            = (fCFO/scs)/Nfft\n",
    "yn             = AddNoise(True)(y, n0, CFO)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17b71adf",
   "metadata": {},
   "source": [
    "## SSB Receiver Side\n",
    "Receiver side implements the following procedures for downlink synchronization:\n",
    "- Receiver Combining\n",
    "- Time Synchronization.\n",
    "    - Raster Search\n",
    "    - Finding OFDM symbol boundry\n",
    "    - $\\text{N}_\\text{ID}^\\text{2}$ detection.\n",
    "- Resource Grid reconstruction\n",
    "    - Extract SSB Grid\n",
    "- SSS Detection\n",
    "    - $\\text{N}_\\text{ID}^\\text{1}$ detection.\n",
    "- DMRS Parameter estimation\n",
    "    - Estimates following parameters\n",
    "        - Half frame Index\n",
    "        - SSB Index (lower 3 values)\n",
    "- Symbol Equalization\n",
    "    - Estimate PBCH Symbols\n",
    "- PBCH Decoding\n",
    "    - Decode MIB parameters\n",
    "    - Decode ATI Parameters\n",
    "    \n",
    "The detail procedure is shown below:\n",
    "\n",
    "| |\n",
    "|:--:| \n",
    "| |\n",
    "| ![SSB Tranmitter side](images/PBCHReceiver.svg)| \n",
    "| *Receiver side implementation of SSB* |\n",
    "\n",
    "\n",
    "<br/><br/>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bafc3971",
   "metadata": {},
   "source": [
    "### Receiver combining"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ee7aecc9",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Receiver combiner Object \n",
    "# angles         = np.array([[0, -70]])\n",
    "angles         = np.zeros([90,2])\n",
    "angles[:,1]    = np.linspace(0,360, 90)\n",
    "spacing        = np.array([lamda/2, lamda/2])\n",
    "rxArray        = np.array([Nr_x, Nr_y, Pr])\n",
    "rxCombining    = ReceiveCombining(combinerType = \"dft\", numDFTBeams = 16, output = \"best\")\n",
    "r              = rxCombining(yn)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2ea3ff7",
   "metadata": {},
   "source": [
    "### PSS Detection: largest peak"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1a2d0582",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "**(rasterOffset, PSS-ID) (138, 0)\n",
      "**(rasterOffset, PSS-ID) (138, 1)\n",
      "**(rasterOffset, PSS-ID) (138, 2)\n"
     ]
    }
   ],
   "source": [
    "## PSS Detection: Based on time domain PSS Correlation\n",
    "# pssPeakIndices, pssCorrelation, rN_ID2 = pssDetection(r, Nfft, lengthCP = lengthCP[1], \n",
    "#                                                       N_ID2 = None, freqOffset = ssboffset,\n",
    "#                                                       height = 0.75, prominence = 0.65, width=10)\n",
    "## PSS Detection: Based on time domain PSS Correlation\n",
    "# pssDetection   = PSSDetection(\"correlation\", \"threshold\")\n",
    "pssDetection   = PSSDetection(\"largestPeak\")\n",
    "ssboffset      = int((Nfft-Neff)/2+ssbRGobject.startingSubcarrierIndices)\n",
    "pssPeakIndices, pssCorrelation, rN_ID2, freqOffset = pssDetection(r, Nfft, lengthCP = lengthCP[1], \n",
    "                                                                  N_ID2 = None, freqOffset = ssboffset)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccacc89c",
   "metadata": {},
   "source": [
    "### Largest peak"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a1960f09",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## PSS Detection Plot\n",
    "#################################################################\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "# single line\n",
    "plt.plot(pssCorrelation)\n",
    "plt.vlines(x = pssPeakIndices, ymin = 0*pssCorrelation[pssPeakIndices],\n",
    "           ymax = pssCorrelation[pssPeakIndices], colors = 'purple')\n",
    "plt.ylim([0,np.max(pssCorrelation)*1.1])\n",
    "plt.show()\n",
    "#________________________________________________________________"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca5ce7ce",
   "metadata": {},
   "source": [
    "### OFDM Demodulation: Resource Grid reconstruction\n",
    "OFDM Demodulator process a block of data and performs following operations on each column:\n",
    "- Fetch a ($\\text{N}_\\text{FFT} + \\text{L}_\\text{CP}$) samples from the received sequence.\n",
    "- Remove the cycle prefix $\\text{L}_\\text{CP}$ samples\n",
    "- Perform FFT Transform on remaining $\\text{N}_\\text{FFT}$ samples \n",
    "- Insert these samples into the columns of a grid.\n",
    "![OFDMDemodulator](images/OFDM_Rx.svg)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c01c280f",
   "metadata": {},
   "outputs": [],
   "source": [
    "## OFDM Demodulator Object \n",
    "ofdmDemodulator = OFDMDemodulator(Nfft, lengthCP[1])\n",
    "pssStartIndex   = pssPeakIndices\n",
    "# pssStartIndex   = pssPeakIndices[0][0]\n",
    "rxGrid          = ofdmDemodulator(r[...,pssStartIndex:(pssStartIndex+4*(Nfft+lengthCP[1]))])[0,0,0,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "b067e1ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 512)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rxGrid.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c647bc6",
   "metadata": {},
   "source": [
    "### SSB Extaction from Resource Grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5464df3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "ssbSCSoffset   = int((Nfft-Neff)/2+ssbRGobject.startingSubcarrierIndices)\n",
    "ssbEstimate    = rxGrid[...,ssbSCSoffset:(ssbSCSoffset+240)]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "524e03f5",
   "metadata": {},
   "source": [
    "### Comparing Transmitted and Received SSB Grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "2ffe1c53",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot SSB\n",
    "fig, ax = plt.subplots(1,2)\n",
    "ax[0].imshow(np.abs(ssbEstimate), cmap = 'hot', interpolation='nearest', aspect = \"auto\")\n",
    "ax[0].grid(color='c', linestyle='-', linewidth=1)\n",
    "\n",
    "ax[1].imshow(np.abs(ssb[0]), cmap = 'hot', interpolation='nearest', aspect = \"auto\")\n",
    "ax[1].grid(color='c', linestyle='-', linewidth=1)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0bdc0d0e",
   "metadata": {},
   "source": [
    "### Spectrum Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "e3697e07",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot SSB\n",
    "fig, ax = plt.subplots(1,2)\n",
    "ax[0].plot(np.arange(rxGrid.shape[-1])*subCarrierSpacingCommon + carrierFrequency, np.abs(rxGrid[0]), lw = 3)\n",
    "ax[0].grid(color='k', linestyle='-', linewidth=1)\n",
    "ax[0].set_xlabel(\"Frequency\")\n",
    "ax[0].set_ylabel(\"Power\")\n",
    "ax[0].set_title(\"Spectrum of received Signal\")\n",
    "\n",
    "ax[1].plot(np.arange(X.shape[-1])*subCarrierSpacingCommon + carrierFrequency, np.abs(X[ssbRGobject.startingSymbolIndices[0]]), lw = 6)\n",
    "ax[1].grid(color='k', linestyle='-', linewidth=1)\n",
    "ax[1].set_xlabel(\"Frequency\")\n",
    "ax[1].set_ylabel(\"Power\")\n",
    "ax[1].set_title(\"Spectrum of tranmitted Signal\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "318cf269",
   "metadata": {},
   "source": [
    "### (SSS Detection: PSS channel assisted) + Cell-ID estimation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "5f84ab83",
   "metadata": {},
   "outputs": [],
   "source": [
    "sssDetection   = SSSDetection(method=\"channelAssisted\", N_ID2=rN_ID2)\n",
    "rN_ID1         = sssDetection(ssbEstimate)\n",
    "rN_ID          = 3*rN_ID1 + rN_ID2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67643e98",
   "metadata": {},
   "source": [
    "### DMRS Parameters Detection + DMRS Sequence Generation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "8e50ffe5",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Generate SSB object to get DMRS and PBCH Indices\n",
    "rxSSBobject    = SSB_Grid(rN_ID)\n",
    "rxDMRSIndices  = rxSSBobject.dmrsIndices\n",
    "\n",
    "## Generate DMRS sequence\n",
    "dmrsDetection  = DMRSParameterDetection(int(rN_ID), nssbCandidatesInHrf, dmrsLen)\n",
    "rssbIndex, rHrfBit = dmrsDetection(ssbEstimate)\n",
    "rxDMRSobject   = DMRS(\"PBCH\", int(rN_ID), int(rssbIndex), nssbCandidatesInHrf, rHrfBit)\n",
    "rxDMRSseq      = rxDMRSobject(dmrsLen)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bede201c",
   "metadata": {},
   "source": [
    "### Channel Estimation and PBCH Symbol Equalization\n",
    "The following steps are performed:\n",
    "- Channel Estimation \n",
    "- Symbol Equalization\n",
    "\n",
    "The details of the  implementation is as follow:\n",
    "\n",
    "|Parameters | Values\n",
    "| :--- | :--- \n",
    "|Channel Estimator | Zeros forcing\n",
    "|Channel Interpolation | Nearest Neighbour\n",
    "|Symbol Equalization | Minimum mean square error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "d81b2772",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Estimating the channel at DMRS (t-f) location, interpolting for data (t-f) location and equalizing the symbols\n",
    "## Object for Channel Estimation\n",
    "chanEst        = ChannelEstimationAndEqualization(estimatorType = \"ZF\", interpolatorType = \"NN\")\n",
    "rxPBCHIndices  = rxSSBobject.pbchIndices\n",
    "pbchEstimate   = chanEst(ssbEstimate, rxDMRSseq[0], rxDMRSIndices, rxPBCHIndices)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2fc3cb89",
   "metadata": {},
   "source": [
    "## Constellation Diagram: Rx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "e8642492",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.scatter(np.real(pbchEstimate), np.imag(pbchEstimate))\n",
    "ax.scatter(np.real(pbchSymbols),  np.imag(pbchSymbols), s=48)\n",
    "ax.grid()\n",
    "ax.axhline(y=0, ls=\":\", c=\"k\")\n",
    "ax.axvline(x=0, ls=\":\", c=\"k\")\n",
    "ax.set_xlim([-2,2])\n",
    "ax.set_ylim([-2,2])\n",
    "ax.set_xlabel(\"Real {x}\")\n",
    "ax.set_ylabel(\"Imag {x}\")\n",
    "ax.set_title(\"Constellation Diagram: QPSK\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f92776b",
   "metadata": {},
   "source": [
    "### PBCH Decoding\n",
    "PBCH decoder extract the MIB and ATI payload bits from the estimated/equalized symbols. \n",
    "\n",
    "Implementation of PBCH is detailed below:\n",
    "\n",
    "![PBCHRxChain](images/PBCHChain.svg)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "36e4a9e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/tenet/Downloads/Packages/5G_Toolkit/version12/Tutorials/Simulations/Tutorial-5 [SSB]/../../../toolkit5G/ChannelCoder/PolarCoder/polarDecoder.py:494: UserWarning: Required ressource allocation is large for the selected blocklength. Consider option `cpu_only=True`.\n",
      "  warnings.warn(\"Required ressource allocation is large \" \\\n"
     ]
    }
   ],
   "source": [
    "## PBCH Chain for Decoding information\n",
    "polarDecoder   = \"SCL\"\n",
    "symbolDemapper = \"maxlog\"\n",
    "# extractMIBinfo = False\n",
    "extractMIBinfo = True\n",
    "# carrierFreq, cellID, nssbCandidatesInHrf, ssbIndex, polarDecType, symbolDemapperType\n",
    "pbchDecoder    = PBCHDecoder(carrierFrequency, int(rN_ID), nssbCandidatesInHrf, rssbIndex, polarDecoder, symbolDemapper)\n",
    "rxMIB, check   = pbchDecoder(pbchEstimate, Pt_a/n0, extractMIBinfo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "d16ad237",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Hurray]: CRC-check passed!\n"
     ]
    }
   ],
   "source": [
    "if(np.all(check)):\n",
    "    print(\"[Hurray]: CRC-check passed!\")\n",
    "else:\n",
    "    print(\"[Ohh]: CRC-check failed!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40cd851c",
   "metadata": {},
   "source": [
    "### Information Aggregation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "af43a5c0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Carrier Frequency:\t3600000000.0\n",
      "ChoiceBit:  \t\t0\n",
      "nSsbCandidatesInHrf: \t8\n",
      "subCarrierSpacingCommon:30000\n",
      "DMRSTypeAPosition: \ttypeA\n",
      "controlResourceSet0:\t1\n",
      "searchSpace0: \t\t13\n",
      "cellBarred: \t\tbarred\n",
      "intraFreqReselection: \tnotAllowed\n",
      "systemFrameNumber: \t644\n",
      "ssbSubCarrierOffset: \t2\n",
      "HRFBit: \t\t0\n",
      "iSSBindex: \t\t0\n"
     ]
    }
   ],
   "source": [
    "pbchDecoder.mibRx.displayParameters(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "24d775e0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Carrier Frequency:\t3600000000.0\n",
      "ChoiceBit:  \t\t0\n",
      "nSsbCandidatesInHrf: \t8\n",
      "subCarrierSpacingCommon:30000\n",
      "DMRSTypeAPosition: \ttypeA\n",
      "controlResourceSet0:\t1\n",
      "searchSpace0: \t\t13\n",
      "cellBarred: \t\tbarred\n",
      "intraFreqReselection: \tnotAllowed\n",
      "systemFrameNumber: \t644\n",
      "ssbSubCarrierOffset: \t2\n",
      "HRFBit: \t\t0\n",
      "iSSBindex: \t\t0\n"
     ]
    }
   ],
   "source": [
    "pbchObject.mib.displayParameters(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b138032",
   "metadata": {},
   "source": [
    "## Performance Evaluations: BER + Cell-IDs + DMRS Parameter Detection"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0705d5e4",
   "metadata": {},
   "source": [
    "### Cell-IDs Detection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "42da0b9d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Success]: Cell-IDs correctly detected!\n"
     ]
    }
   ],
   "source": [
    "if (rN_ID == N_ID):\n",
    "    print(\"[Success]: Cell-IDs correctly detected!\")\n",
    "else:\n",
    "    if (rN_ID1 != N_ID1 and rN_ID2 != N_ID2):\n",
    "        print(\"[Failed]: Receiver couldn't detect the Cell-ID1 and cell-ID2 correctly!\")\n",
    "    elif(rN_ID1 != N_ID1):\n",
    "        print(\"[Failed]: Receiver couldn't detect the Cell-ID1 correctly!\")\n",
    "    else:\n",
    "        print(\"[Failed]: Receiver couldn't detect the cell-ID2 correctly!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "c5b62e8e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3, 3)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rN_ID1, N_ID1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40f771f8",
   "metadata": {},
   "source": [
    "### DMRS Parameter Detection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "0e49defa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Success]: DMRS parameters correctly detected!\n"
     ]
    }
   ],
   "source": [
    "if (rssbIndex == ssbIndex[0]):\n",
    "    print(\"[Success]: DMRS parameters correctly detected!\")\n",
    "else:\n",
    "    print(\"[Failed]: Receiver couldn't detect the ssbIndex correctly!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5519dc5d",
   "metadata": {},
   "source": [
    "### BER computation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "9ee21003",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " (uncoded-BER, codedBER): (0.004629629629629629, 0.0)\n"
     ]
    }
   ],
   "source": [
    "## Computing BER: Coded and Uncoded\n",
    "uncodedBER     = np.zeros((numUEs, nBatch))\n",
    "codedBER       = np.zeros((numUEs, nBatch))\n",
    "\n",
    "bitEst         = pbchDecoder.llr.copy()\n",
    "bitEst[pbchDecoder.llr  > 0]   = 1\n",
    "bitEst[pbchDecoder.llr  < 0]   = 0\n",
    "uncodedBER = np.mean(np.abs(bitEst - pbchObject.scr2bits[0]))\n",
    "codedBER   = np.mean(np.abs(pbchDecoder.pbchResequenceBits - pbchObject.payloadMIB[0]))\n",
    "\n",
    "print(\" (uncoded-BER, codedBER): \"+str((uncodedBER, codedBER)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f1c48b42",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Raw Cell Format",
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
