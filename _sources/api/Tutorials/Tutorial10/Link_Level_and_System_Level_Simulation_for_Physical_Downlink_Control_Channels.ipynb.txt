{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "089c4633",
   "metadata": {},
   "source": [
    "# Link Level Simulation for Physical Downlink Control Channels\n",
    "\n",
    "Link-level simulation in 5G networks involves simulating the Physical Downlink Control Channel (PDCCH), which is responsible for transmitting control information from the base station (gNB) to the user equipment (UE). PDCCH carries essential information such as resource allocation, scheduling assignments, and other control signaling necessary for UE communication and network operation.\n",
    "\n",
    "In a link-level simulation of PDCCH, various parameters and characteristics of the channel are modeled and simulated to analyze the performance of the control channel under different conditions. This includes:\n",
    "\n",
    "1. Channel Modeling: Simulating the radio channel characteristics, including path loss, fading, delay spread, and Doppler effects, to accurately represent the wireless propagation environment.\n",
    "\n",
    "2. Modulation and Coding: Modeling the modulation and coding schemes (MCS) used for PDCCH transmission to evaluate the impact of different coding and modulation techniques on channel reliability and throughput.\n",
    "\n",
    "3. Resource Allocation: Simulating the resource allocation process to assess how resources are assigned to UEs based on scheduling decisions made by the gNB.\n",
    "\n",
    "4. Error Correction: Evaluating the effectiveness of error correction mechanisms such as Hybrid Automatic Repeat Request (HARQ) in recovering from transmission errors and improving overall reliability.\n",
    "\n",
    "5. Interference Analysis: Analyzing the impact of interference from neighboring cells or other UEs on PDCCH reception and performance.\n",
    "\n",
    "6. Beamforming and MIMO: Assessing the benefits of beamforming and Multiple Input Multiple Output (MIMO) techniques in enhancing PDCCH transmission and reception, especially in scenarios with high mobility or dense deployments.\n",
    "\n",
    "Overall, link-level simulation of PDCCH in 5G networks provides valuable insights into the channel behavior, system performance, and optimization strategies for efficient control channel design and operation.\n",
    "\n",
    "The flow of the tutorial as described as follows:\n",
    "\n",
    "- [Import Libraries](#import-libraries)\n",
    "    - [Import Basic Python Libraries](#Import-Basic-Python-Libraries)\n",
    "    - [Import 5G-Toolkit Libraries](#Import-5G-Toolkit-Libraries)\n",
    "- [Simulation Parameters](#Simulation-Parameters)\n",
    "- [CORESET Parameters](#CORESET-Parameters)\n",
    "- [Generate Wireless Channel: CDL-A](#Generate-Wireless-Channel:-CDL-A)\n",
    "- [Link level Simulation: For each Aggregation level and Each SNR value](#Link-level-Simulation:-For-each-Aggregation-level-and-Each-SNR-value)\n",
    "- [Reliability Performance: BER/BLER vs SNR](#Reliability-Performance:-BER/BLER-vs-SNR)\n",
    "- [Reliability Performance: BER/BLER vs SNR for 20000 Batches](#Reliability-Performance:-BER/BLER-vs-SNR-for-20000-Batches)\n",
    "\n",
    "\n",
    "## Import Libraries\n",
    "\n",
    "### Import Basic Python Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d2eee7c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib as mpl\n",
    "\n",
    "# %matplotlib widget\n",
    "# %matplotlib inline\n",
    "import matplotlib.pyplot  as plt\n",
    "import matplotlib.patches as patches\n",
    "\n",
    "import os\n",
    "os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"-1\"\n",
    "os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db35b42d",
   "metadata": {},
   "source": [
    "## Import 5G-Toolkit Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5e7281a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "sys.path.append(\"../../../\")\n",
    "\n",
    "from toolkit5G.PhysicalChannels   import PDCCH, PDCCHDecoder\n",
    "from toolkit5G.ResourceMapping    import ResourceMappingPDCCH, CORESET\n",
    "from toolkit5G.ReceiverAlgorithms import ChannelEstimationAndEqualizationPDCCH\n",
    "from toolkit5G.ChannelModels      import AntennaArrays, SimulationLayout, ParameterGenerator, ChannelGenerator\n",
    "from toolkit5G.ChannelProcessing  import AddNoise"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c17f34de",
   "metadata": {},
   "source": [
    "## Simulation Parameters "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3638180d",
   "metadata": {},
   "outputs": [],
   "source": [
    "terrain          = \"CDL-A\"               # Propagation Scenario or Terrain for BS-UE links\n",
    "carrierFrequency = 3.6*10**9             # carrier frequency in Hz\n",
    "mu               = 0                     # numerology\n",
    "scs              = (2**mu)*(15*10**3)    # sub-carrier spacing\n",
    "slotNumber       = 0                     # slot number. Note that number of slots per sub-frame of 1 ms is 2**mu\n",
    "numRBs           = 270                   # Please don't change this. The simulation will break down\n",
    "Bandwidth        = numRBs*scs  \n",
    "nBSs             = 1                     # number of BSs \n",
    "nUEs             = 1                     # number of UEs \n",
    "bsArrayGeometry  = np.array([1,1,1,2,2], dtype=int)\n",
    "ueArrayGeometry  = np.array([1,1,1,1,2], dtype=int)\n",
    "Nt               = bsArrayGeometry.prod() # number of Tx antenna\n",
    "Nr               = ueArrayGeometry.prod() # number of Rx antenna\n",
    "Nfft             = 4096\n",
    "nBatches         = 200\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0eb37f87",
   "metadata": {},
   "source": [
    "## CORESET Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "177e5c5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "AggLevel         = np.array([1,2,4,8,16], dtype=int)\n",
    "\n",
    "monitoringSymbolsWithinSlot = np.array([0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype = int)\n",
    "startSymIndex               = np.nonzero(monitoringSymbolsWithinSlot)[0][0]\n",
    "\n",
    "cce_reg_Mapping = \"interleaved\"               # CCE to REG mapping type\n",
    "L = np.array([2,6,6,6,6], dtype=int)          # REG-bundle size for each Aggregation level\n",
    "R = np.array([3,2,2,2,2], dtype=int)          # Interleaver size for each Aggregation level \n",
    "nshift = np.array([0,0,0,0,0], dtype=int)     # cyclic-shift index after interleaving\n",
    "\n",
    "duration = np.array([1,1,2,2,2], dtype=int)   # duration of CORESET for each Aggregation level (AL)\n",
    "\n",
    "fdr1 = np.array([1,0,0,0,0,0,0,0,0,\n",
    "                 0,0,0,0,0,0,0,0,0,\n",
    "                 0,0,0,0,0,0,0,0,0,\n",
    "                 0,0,0,0,0,0,0,0,0,\n",
    "                 0,0,0,0,0,0,0,0,0], dtype = int) # 1 one\n",
    "\n",
    "fdr2 = np.array([1,1,0,0,0,0,0,0,0,\n",
    "                 0,0,0,0,0,0,0,0,0,\n",
    "                 0,0,0,0,0,0,0,0,0,\n",
    "                 0,0,0,0,0,0,0,0,0,\n",
    "                 0,0,0,0,0,0,0,0,0], dtype = int) # 2 ones\n",
    "\n",
    "fdr4 = fdr2\n",
    "\n",
    "fdr8 = np.array([1,1,1,1,0,0,0,0,0,\n",
    "                 0,0,0,0,0,0,0,0,0,\n",
    "                 0,0,0,0,0,0,0,0,0,\n",
    "                 0,0,0,0,0,0,0,0,0,\n",
    "                 0,0,0,0,0,0,0,0,0], dtype = int) # 4 ones\n",
    "\n",
    "fdr16 = np.array([1,1,1,1,1,1,1,1,0,\n",
    "                  0,0,0,0,0,0,0,0,0,\n",
    "                  0,0,0,0,0,0,0,0,0,\n",
    "                  0,0,0,0,0,0,0,0,0,\n",
    "                  0,0,0,0,0,0,0,0,0], dtype = int) # 8 ones\n",
    "\n",
    "frequencyDomainResources = np.array([fdr1,fdr2,fdr4,fdr8,fdr16], dtype=int) # freq Domain Resources for each AL\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccb7c5fd",
   "metadata": {},
   "source": [
    "## Generate Wireless Channel: CDL-A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "744a1196",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Hf shape: (1, 4096, 2, 4)\n"
     ]
    }
   ],
   "source": [
    "# Antenna Array at UE side\n",
    "# assuming antenna element type to be \"OMNI\"\n",
    "# with 2 panel and 2 single polarized antenna element per panel.\n",
    "ueAntArray = AntennaArrays(antennaType = \"OMNI\",  centerFrequency = carrierFrequency, \n",
    "                           arrayStructure  = ueArrayGeometry)\n",
    "ueAntArray() \n",
    "\n",
    "# # Radiation Pattern of Rx antenna element \n",
    "# ueAntArray.displayAntennaRadiationPattern()\n",
    "\n",
    "\n",
    "# Antenna Array at BS side\n",
    "# assuming antenna element type to be \"3GPP_38.901\", a parabolic antenna \n",
    "# with 4 panel and 4 single polarized antenna element per panel.\n",
    "bsAntArray = AntennaArrays(antennaType = \"3GPP_38.901\", centerFrequency = carrierFrequency, \n",
    "                           arrayStructure  = bsArrayGeometry)\n",
    "bsAntArray()\n",
    "    \n",
    "# # Radiation Pattern of Tx antenna element \n",
    "# bsAntArray[0].displayAntennaRadiationPattern()\n",
    "\n",
    "# Layout Parameters\n",
    "isd                  = 200         # inter site distance\n",
    "minDist              = 10          # min distance between each UE and BS \n",
    "ueHt                 = 1.5         # UE height\n",
    "bsHt                 = 25          # BS height\n",
    "bslayoutType         = \"Hexagonal\" # BS layout type\n",
    "ueDropType           = \"Hexagonal\" # UE drop type\n",
    "htDist               = \"equal\"     # UE height distribution\n",
    "ueDist               = \"equal\"     # UE Distribution per site\n",
    "nSectorsPerSite      = 1           # number of sectors per site\n",
    "maxNumFloors         = 1           # Max number of floors in an indoor object\n",
    "minNumFloors         = 1           # Min number of floors in an indoor object\n",
    "heightOfRoom         = 3           # height of room or ceiling in meters\n",
    "indoorUEfract        = 0.5         # Fraction of UEs located indoor\n",
    "lengthOfIndoorObject = 3           # length of indoor object typically having rectangular geometry \n",
    "widthOfIndoorObject  = 3           # width of indoor object\n",
    "forceLOS             = False       # boolen flag if true forces every link to be in LOS state\n",
    "\n",
    "# simulation layout object                                 \n",
    "simLayoutObj = SimulationLayout(numOfBS = nBSs,\n",
    "                                numOfUE = nUEs,\n",
    "                                heightOfBS = bsHt,\n",
    "                                heightOfUE = ueHt,\n",
    "                                minUEBSDistance = minDist,\n",
    "                                ISD = isd,\n",
    "                                layoutType = bslayoutType,\n",
    "                                ueDropMethod = ueDropType, \n",
    "                                UEdistibution = ueDist,\n",
    "                                UEheightDistribution = htDist,\n",
    "                                numOfSectorsPerSite = nSectorsPerSite,\n",
    "                                ueRoute = None)\n",
    "\n",
    "simLayoutObj(terrain = terrain, carrierFreq = carrierFrequency, \n",
    "             ueAntennaArray = ueAntArray, bsAntennaArray = bsAntArray,\n",
    "             indoorUEfraction = indoorUEfract,\n",
    "             lengthOfIndoorObject = lengthOfIndoorObject,\n",
    "             widthOfIndoorObject  = widthOfIndoorObject, forceLOS = forceLOS)\n",
    "\n",
    "\n",
    "\n",
    "paramGen = simLayoutObj.getParameterGenerator()\n",
    "\n",
    "# paramGen.displayClusters((0,0,0), rayIndex = 0)\n",
    "channel = paramGen.getChannel()\n",
    "Hf      = channel.ofdm(scs, Nfft, normalizeChannel = True)[0,0,0]\n",
    "\n",
    "print(\" Hf shape: \"+str(Hf.shape)) #(nUEs,Nfft, Nr, Nt) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e6f56c6",
   "metadata": {},
   "source": [
    "## Link level Simulation: For each Aggregation level and Each SNR value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c3241596",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "##############################################################\n",
      "Simulation: [0] for    AL = 1\n",
      "********************************************************\n",
      "Simulation: [0] for      SNRdB = -5.0\n",
      "Simulation: [0, 0] for       BLER = 0.965\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [1] for      SNRdB = -3.333333333333333\n",
      "Simulation: [0, 1] for       BLER = 0.765\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [2] for      SNRdB = -1.6666666666666665\n",
      "Simulation: [0, 2] for       BLER = 0.24\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [3] for      SNRdB = 0.0\n",
      "Simulation: [0, 3] for       BLER = 0.015000000000000013\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [4] for      SNRdB = 1.666666666666667\n",
      "Simulation: [0, 4] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [5] for      SNRdB = 3.333333333333334\n",
      "Simulation: [0, 5] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [6] for      SNRdB = 5.0\n",
      "Simulation: [0, 6] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [7] for      SNRdB = 6.666666666666668\n",
      "Simulation: [0, 7] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [8] for      SNRdB = 8.333333333333334\n",
      "Simulation: [0, 8] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [9] for      SNRdB = 10.0\n",
      "Simulation: [0, 9] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "##############################################################\n",
      "Simulation: [1] for    AL = 2\n",
      "********************************************************\n",
      "Simulation: [0] for      SNRdB = -7.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/tenet/Startup/Packages/5G_Toolkit/version15/Tutorials/Simulations/Tutorial-11[Link_Level_and_System_Level_Simulation_for_Physical_Downlink_Control_Channels]/../../../toolkit5G/ChannelCoder/PolarCoder/polarDecoder.py:494: UserWarning: Required ressource allocation is large for the selected blocklength. Consider option `cpu_only=True`.\n",
      "  warnings.warn(\"Required ressource allocation is large \" \\\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Simulation: [1, 0] for       BLER = 0.825\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [1] for      SNRdB = -5.444444444444445\n",
      "Simulation: [1, 1] for       BLER = 0.31499999999999995\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [2] for      SNRdB = -3.888888888888889\n",
      "Simulation: [1, 2] for       BLER = 0.03500000000000003\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [3] for      SNRdB = -2.333333333333333\n",
      "Simulation: [1, 3] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [4] for      SNRdB = -0.7777777777777777\n",
      "Simulation: [1, 4] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [5] for      SNRdB = 0.7777777777777777\n",
      "Simulation: [1, 5] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [6] for      SNRdB = 2.333333333333334\n",
      "Simulation: [1, 6] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [7] for      SNRdB = 3.8888888888888893\n",
      "Simulation: [1, 7] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [8] for      SNRdB = 5.444444444444445\n",
      "Simulation: [1, 8] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [9] for      SNRdB = 7.0\n",
      "Simulation: [1, 9] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "##############################################################\n",
      "Simulation: [2] for    AL = 4\n",
      "********************************************************\n",
      "Simulation: [0] for      SNRdB = -10.0\n",
      "Simulation: [2, 0] for       BLER = 0.745\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [1] for      SNRdB = -8.333333333333334\n",
      "Simulation: [2, 1] for       BLER = 0.25\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [2] for      SNRdB = -6.666666666666666\n",
      "Simulation: [2, 2] for       BLER = 0.020000000000000018\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [3] for      SNRdB = -5.0\n",
      "Simulation: [2, 3] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [4] for      SNRdB = -3.333333333333333\n",
      "Simulation: [2, 4] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [5] for      SNRdB = -1.666666666666666\n",
      "Simulation: [2, 5] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [6] for      SNRdB = 0.0\n",
      "Simulation: [2, 6] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [7] for      SNRdB = 1.6666666666666679\n",
      "Simulation: [2, 7] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [8] for      SNRdB = 3.333333333333334\n",
      "Simulation: [2, 8] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [9] for      SNRdB = 5.0\n",
      "Simulation: [2, 9] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "##############################################################\n",
      "Simulation: [3] for    AL = 8\n",
      "********************************************************\n",
      "Simulation: [0] for      SNRdB = -15.0\n",
      "Simulation: [3, 0] for       BLER = 0.975\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [1] for      SNRdB = -13.0\n",
      "Simulation: [3, 1] for       BLER = 0.745\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [2] for      SNRdB = -11.0\n",
      "Simulation: [3, 2] for       BLER = 0.22999999999999998\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [3] for      SNRdB = -9.0\n",
      "Simulation: [3, 3] for       BLER = 0.015000000000000013\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [4] for      SNRdB = -7.0\n",
      "Simulation: [3, 4] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [5] for      SNRdB = -5.0\n",
      "Simulation: [3, 5] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [6] for      SNRdB = -3.0\n",
      "Simulation: [3, 6] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [7] for      SNRdB = -1.0\n",
      "Simulation: [3, 7] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [8] for      SNRdB = 1.0\n",
      "Simulation: [3, 8] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [9] for      SNRdB = 3.0\n",
      "Simulation: [3, 9] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "##############################################################\n",
      "Simulation: [4] for    AL = 16\n",
      "********************************************************\n",
      "Simulation: [0] for      SNRdB = -15.0\n",
      "Simulation: [4, 0] for       BLER = 0.44999999999999996\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [1] for      SNRdB = -13.222222222222221\n",
      "Simulation: [4, 1] for       BLER = 0.05500000000000005\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [2] for      SNRdB = -11.444444444444445\n",
      "Simulation: [4, 2] for       BLER = 0.0050000000000000044\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [3] for      SNRdB = -9.666666666666668\n",
      "Simulation: [4, 3] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [4] for      SNRdB = -7.888888888888889\n",
      "Simulation: [4, 4] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [5] for      SNRdB = -6.111111111111111\n",
      "Simulation: [4, 5] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [6] for      SNRdB = -4.333333333333334\n",
      "Simulation: [4, 6] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [7] for      SNRdB = -2.555555555555557\n",
      "Simulation: [4, 7] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [8] for      SNRdB = -0.7777777777777786\n",
      "Simulation: [4, 8] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n",
      "********************************************************\n",
      "Simulation: [9] for      SNRdB = 1.0\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Simulation: [4, 9] for       BLER = 0.0\n",
      "********************************************************\n",
      "\n"
     ]
    }
   ],
   "source": [
    "numPoints  = 10\n",
    "SNRdB      = np.array([np.linspace(-5, 10, numPoints),\n",
    "                       np.linspace(-7, 7, numPoints),\n",
    "                       np.linspace(-10, 5, numPoints),\n",
    "                       np.linspace(-15, 3, numPoints),\n",
    "                       np.linspace(-15, 1, numPoints)])\n",
    "\n",
    "SNR        = 10**(SNRdB/10)\n",
    "\n",
    "codedBER   = np.zeros((AggLevel.size, numPoints))\n",
    "uncodedBER = np.zeros((AggLevel.size, numPoints))\n",
    "bler       = np.zeros((AggLevel.size, numPoints))\n",
    "\n",
    "rnti       = int(1 + np.random.randint(65518, dtype = int)) # rnti\n",
    "nID        = int(np.random.randint(65536, dtype = int))     # scrambling-ID from scrambling ratematched Bits\n",
    "bwpOffset  = 0\n",
    "\n",
    "for al in range(AggLevel.size):\n",
    "    print(\"##############################################################\")\n",
    "    print(\"Simulation: [\"+str(al)+\"] for    AL = \"+str(AggLevel[al]))\n",
    "    coresetObj        = CORESET(duration[al],frequencyDomainResources[al])\n",
    "    coresetPRBIndices = coresetObj(cce_REG_MappingType = cce_reg_Mapping, \n",
    "                                   reg_BundleSize=L[al], interleaverSize = R[al], shiftIndex = nshift[al])\n",
    "    numPDCCHsymbols  = int(54*AggLevel[al]) # number of REs occupied by PDCCH data (QPSK symbols)\n",
    "    numPDCCHdmrs     = int(18*AggLevel[al]) # number of REs occupied by PDCCH DMRS symbols\n",
    "    chosenCCEindices = np.arange(AggLevel[al])\n",
    "\n",
    "    E        = numPDCCHsymbols*2   # number of target Bits\n",
    "    K        = 20                  # payload size in bits\n",
    "    dciBits  = np.random.randint(0, 2, [nBatches, K]) \n",
    "\n",
    "\n",
    "    pdcch = PDCCH(K, E, rnti, nID)\n",
    "    symb  = pdcch(dciBits)\n",
    "\n",
    "\n",
    "    rmPDCCH      = ResourceMappingPDCCH(mu, frequencyDomainResources[al], duration[al], monitoringSymbolsWithinSlot)\n",
    "    resGrid      = rmPDCCH(symb, cce_reg_Mapping, L[al], R[al], nshift[al], slotNumber, nID, chosenCCEindices)\n",
    "    numRBs       = int(resGrid.shape[-1]/12)\n",
    "    numSymbols   = resGrid.shape[-2]\n",
    "\n",
    "    txGrid    = np.zeros(resGrid.shape[0:-1]+(Nfft,),dtype = np.complex64)\n",
    "    \n",
    "    #loading resource grid in transmission grid\n",
    "    txGrid[..., bwpOffset:bwpOffset+12*numRBs] = resGrid\n",
    "\n",
    "\n",
    "    Xf     = np.sqrt(1/Nt)*(txGrid[...,np.newaxis]).repeat(Nt, axis = -1)\n",
    "\n",
    "    Y  = ((Hf[:,np.newaxis,np.newaxis,...]@Xf[np.newaxis,...,np.newaxis])[...,0])[0]\n",
    "    Hp = np.sqrt(1/Nt)*((Hf.sum(axis = -1).transpose(0,2,1)[:,:,bwpOffset:bwpOffset+12*numRBs])[0]).sum(axis=0)[np.newaxis,np.newaxis,:]\n",
    "\n",
    "    for i in range(numPoints):\n",
    "        print(\"********************************************************\")\n",
    "        print(\"Simulation: [\"+str(i)+\"] for      SNRdB = \"+str(SNRdB[al,i]))\n",
    "        # Added noise\n",
    "        Yf     = AddNoise(False)(Y, 1/SNR[al,i], 0)    \n",
    "        rxGrid = Yf[...,bwpOffset:bwpOffset+12*numRBs,:]\n",
    "\n",
    "\n",
    "        ##### Equalization #####\n",
    "        channelEst    = ChannelEstimationAndEqualizationPDCCH(duration[al], frequencyDomainResources[al], monitoringSymbolsWithinSlot)\n",
    "        equalized_Sym = channelEst(rxGrid.sum(axis=-1),\n",
    "                                   cce_reg_Mapping, L[al], R[al], nshift[al],\n",
    "                                   slotNumber, nID, Hf = Hp)\n",
    "\n",
    "\n",
    "        ##### Decoding #######\n",
    "        pdcchDecoder = PDCCHDecoder(K, E, rnti, nID, decoderType=\"SCL\", demappingMethod = \"app\")\n",
    "        rdciBits     = pdcchDecoder(equalized_Sym, SNR[al,i])\n",
    "\n",
    "        ##### Bit Errors and CRC Check #######\n",
    "        bitEst        = pdcchDecoder.llr.copy()\n",
    "        bitEst[bitEst > 0] = 1\n",
    "        bitEst[bitEst < 0] = 0\n",
    "        uncodedBER[al,i] = np.mean(np.abs(bitEst - pdcch.dciSCR))\n",
    "        codedBER[al,i]   = np.mean(np.abs(rdciBits - dciBits))\n",
    "        bler[al,i]       = 1-pdcchDecoder.check.mean()\n",
    "\n",
    "        print(\"Simulation: \"+str([al,i])+\" for       BLER = \"+str(bler[al,i]))\n",
    "\n",
    "        print(\"********************************************************\")\n",
    "        print()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ead09c62",
   "metadata": {},
   "source": [
    "## Reliability Performance: BER/BLER vs SNR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "01a49aeb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ls1 = [\"-r\", \"--g\", \":m\", \"-k\",\"-b\"]\n",
    "ls2 = [\"-r\", \"--g\", \":m\", \"-k\",\"-b\"]\n",
    "ls3 = [\"-r\", \"--g\", \":m\", \"-k\",\"-b\"]\n",
    "markers = [\"s\", \"o\", \"P\", \"X\", \"d\"]\n",
    "\n",
    "\n",
    "for al in range(AggLevel.size):\n",
    "    \n",
    "#     ax.semilogy(SNRdB[al], uncodedBER[al], ls1[al], marker = markers[al], label=\"uncodedBER-\"+str(al))\n",
    "    ax.semilogy(SNRdB[al], bler[al], ls3[al], marker = markers[al], label=\"BLER for AL = \"+str(AggLevel[al]))    \n",
    "#     ax.semilogy(SNRdB[al], codedBER[al], ls2[al], marker = markers[al], mec = \"white\", label=\"codedBER-\"+str(al))\n",
    "\n",
    "ax.legend(loc=\"best\")\n",
    "\n",
    "#     ax.set_xticks(SNRdB[r])\n",
    "ytck = (0.1**(np.arange(1, 8))).repeat(9)*np.tile(np.arange(10, 1,-1), [7])\n",
    "ytck = np.concatenate([[1],ytck])\n",
    "ax.set_yticks(ytck, minor=True)\n",
    "ax.set_yticks(0.1**(np.arange(0, 7)), minor=False)\n",
    "ax.set_ylim([10**-3,1.1])\n",
    "\n",
    "ax.grid(which = 'minor', alpha = 0.25, linestyle = '--')\n",
    "ax.grid(which = 'major', alpha = 1)\n",
    "\n",
    "ax.set_xlabel(\"SNR (dB)\")\n",
    "ax.set_ylabel(\"Bit/Block error rate (BER/BLER)\")\n",
    "ax.set_title(\"BER/BLER vs SNR (dB) Performance\")\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c5f03ad",
   "metadata": {},
   "source": [
    "## Reliability Performance: BER/BLER vs SNR for 20000 Batches"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2ab32fdf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dB         = np.load(\"Databases/PDCCH_LLS.npz\")\n",
    "\n",
    "uncodedBER = dB[\"uncodedBER\"]\n",
    "codedBER   = dB[\"codedBER\"]\n",
    "bler       = dB[\"bler\"]\n",
    "SNRdB      = dB[\"SNRdB\"]\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "ls1 = [\"-r\", \"--g\", \":m\", \"-k\",\"-b\"]\n",
    "ls2 = [\"-r\", \"--g\", \":m\", \"-k\",\"-b\"]\n",
    "ls3 = [\"-r\", \"--g\", \":m\", \"-k\",\"-b\"]\n",
    "markers = [\"s\", \"o\", \"P\", \"X\", \"d\"]\n",
    "\n",
    "\n",
    "for al in range(AggLevel.size):\n",
    "    \n",
    "#     ax.semilogy(SNRdB[al], uncodedBER[al], ls1[al], marker = markers[al], label=\"uncodedBER-\"+str(al))\n",
    "    ax.semilogy(SNRdB[al], bler[al], ls3[al], marker = markers[al], label=\"BLER for AL = \"+str(AggLevel[al]))    \n",
    "#     ax.semilogy(SNRdB[al], codedBER[al], ls2[al], marker = markers[al], mec = \"white\", label=\"codedBER-\"+str(al))\n",
    "\n",
    "ax.legend(loc=\"best\")\n",
    "\n",
    "#     ax.set_xticks(SNRdB[r])\n",
    "ytck = (0.1**(np.arange(1, 8))).repeat(9)*np.tile(np.arange(10, 1,-1), [7])\n",
    "ytck = np.concatenate([[1],ytck])\n",
    "ax.set_yticks(ytck, minor=True)\n",
    "ax.set_yticks(0.1**(np.arange(0, 7)), minor=False)\n",
    "ax.set_ylim([10**-3,1.1])\n",
    "\n",
    "ax.grid(which = 'minor', alpha = 0.25, linestyle = '--')\n",
    "ax.grid(which = 'major', alpha = 1)\n",
    "\n",
    "ax.set_xlabel(\"SNR (dB)\")\n",
    "ax.set_ylabel(\"Bit/Block error rate (BER/BLER)\")\n",
    "ax.set_title(\"BER/BLER vs SNR (dB) Performance\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "86197022",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
