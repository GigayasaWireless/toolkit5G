{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b170f754",
   "metadata": {},
   "source": [
    "# [BS Side Implementation]-Downlink Time/Frame Synchronization using PSS in 5G Networks\n",
    "\n",
    "## Import Libraries\n",
    "\n",
    "### Import Some Basic Python Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "08ef5870",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# from IPython.display import display, HTML\n",
    "# display(HTML(\"<style>.container { width:90% !important; }</style>\"))\n",
    "\n",
    "import os\n",
    "os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"-1\"\n",
    "os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\n",
    "\n",
    "# %matplotlib widget\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.patches as patches\n",
    "import matplotlib.animation as animation\n",
    "\n",
    "import numpy as np\n",
    "import adi\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eec54900",
   "metadata": {},
   "source": [
    "### Import 5G Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2881ccf1",
   "metadata": {},
   "outputs": [],
   "source": [
    "from toolkit5G.SequenceGeneration import PSS, SSS, DMRS\n",
    "from toolkit5G.PhysicalChannels   import PBCH, PBCHDecoder\n",
    "from toolkit5G.ResourceMapping    import SSB_Grid, ResourceMapperSSB\n",
    "from toolkit5G.OFDM               import OFDMModulator, OFDMDemodulator\n",
    "from toolkit5G.MIMOProcessing     import AnalogBeamforming, ReceiveCombining\n",
    "from toolkit5G.ReceiverAlgorithms import PSSDetection, SSSDetection, ChannelEstimationAndEqualization, DMRSParameterDetection\n",
    "from toolkit5G.Configurations     import TimeFrequency5GParameters, GenerateValidSSBParameters"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f60b60a",
   "metadata": {},
   "source": [
    "## Emulation Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3d7321cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# System Parameters\n",
    "center_frequency    = 1e9 # Hz\n",
    "\n",
    "# OFDM Parameters\n",
    "Bandwidth           = 5*10**6\n",
    "fftSize             = 1024\n",
    "subcarrier_spacing  = 15000\n",
    "numOFDMSymbols      = 14\n",
    "sample_rate         = fftSize*subcarrier_spacing\n",
    "\n",
    "# Pulse Shaping\n",
    "numSamplesPerSymbol = 1\n",
    "\n",
    "\n",
    "# number of samples returned per call to rx()\n",
    "buffer_size         = int(fftSize*1.2*numSamplesPerSymbol*numOFDMSymbols) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f966517",
   "metadata": {},
   "source": [
    "## Generate SSB Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "575e4c58",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## This class fetches valid set of 5G parameters for the system configurations\n",
    "nSymbolFrame= int(140*subcarrier_spacing/15000)\n",
    "## This class fetches valid set of 5G parameters for the system configurations \n",
    "tfParams    = TimeFrequency5GParameters(Bandwidth, subcarrier_spacing)\n",
    "tfParams(nSymbolFrame, typeCP = \"normal\")\n",
    "nRB         = tfParams.numRBs        # SSB Grid size (Number of RBs considered for SSB transition)\n",
    "Neff        = tfParams.Neff        # Number of resource blocks for Resource Grid ( exclude gaurd band | offsets : BWP)\n",
    "Nfft        = 512                 # FFT-size for OFDM\n",
    "lengthCP    = tfParams.lengthCP    # CP length\n",
    "#___________________________________________________________________\n",
    "\n",
    "#### Generate MIB Information\n",
    "lamda                           = 3e8/center_frequency;\n",
    "nSCSOffset                      = 1\n",
    "ssbParameters                   = GenerateValidSSBParameters(center_frequency, nSCSOffset, \"caseA\", ssbSubCarrierOffset = np.array([0]))\n",
    "\n",
    "systemFrameNumber               = ssbParameters.systemFrameNumber\n",
    "subCarrierSpacingCommon         = subcarrier_spacing\n",
    "ssbSubCarrierOffset             = ssbParameters.ssbSubCarrierOffset\n",
    "DMRSTypeAPosition               = ssbParameters.DMRSTypeAPosition\n",
    "controlResourceSet0             = ssbParameters.controlResourceSet0\n",
    "searchSpace0                    = ssbParameters.searchSpace0\n",
    "\n",
    "isPairedBand                    = ssbParameters.isPairedBand\n",
    "nSCSOffset                      = ssbParameters.nSCSOffset\n",
    "choiceBit                       = ssbParameters.choiceBit\n",
    "ssbType                         = ssbParameters.ssbType\n",
    "nssbCandidatesInHrf             = ssbParameters.nssbCandidatesInHrf\n",
    "ssbIndex                        = ssbParameters.ssbIndex\n",
    "hrfBit                          = ssbParameters.hrfBit\n",
    "cellBarred                      = ssbParameters.cellBarred\n",
    "intraFrequencyReselection       = ssbParameters.intraFrequencyReselection\n",
    "withSharedSpectrumChannelAccess = ssbParameters.withSharedSpectrumChannelAccess\n",
    "\n",
    "Nsc_ssb                         = 240\n",
    "Nsymb_ssb                       = 4\n",
    "#_______________________________________\n",
    "\n",
    "\n",
    "N_ID2        = np.random.randint(3)\n",
    "\n",
    "# Generate PSS sequence\n",
    "pssObject    = PSS(N_ID2);\n",
    "pssSequence  = pssObject()\n",
    "\n",
    "N_ID1        = np.random.randint(336)\n",
    "N_ID         = 3*N_ID1 + N_ID2\n",
    "\n",
    "# Generate SSS sequence\n",
    "sssObject    = SSS(N_ID1, N_ID2);\n",
    "sssSequence  = sssObject()\n",
    "\n",
    "# Generate DMRS sequence\n",
    "dmrsLen      = 144;\n",
    "dmrsObject   = DMRS(\"PBCH\", N_ID, ssbIndex, nssbCandidatesInHrf, hrfBit)\n",
    "# dmrsSeq = dmrs.getSequence(\"tensorflow\")\n",
    "dmrsSequence = dmrsObject(dmrsLen)\n",
    "\n",
    "\n",
    "# Generate PBCH symbols\n",
    "pbchObject   = PBCH(center_frequency, choiceBit, subCarrierSpacingCommon, DMRSTypeAPosition,\n",
    "                   controlResourceSet0, searchSpace0, cellBarred, intraFrequencyReselection,\n",
    "                   systemFrameNumber, ssbSubCarrierOffset, hrfBit, ssbIndex, N_ID,\n",
    "                   nssbCandidatesInHrf)\n",
    "\n",
    "pbchSymbols  = pbchObject()\n",
    "\n",
    "## Generate SSB Object\n",
    "ssbObject    = SSB_Grid(N_ID, True)\n",
    "ssb          = ssbObject(pssSequence, sssSequence, dmrsSequence, pbchSymbols)\n",
    "\n",
    "## Loading SSB to Resource Grid\n",
    "#####################################\n",
    "# ssbPositionInBurst = np.ones(nssbCandidatesInHrf, dtype=int)\n",
    "ssbPositionInBurst    = np.zeros(nssbCandidatesInHrf, dtype=int)\n",
    "ssbPositionInBurst[0] = 1\n",
    "\n",
    "ssbRGobject    = ResourceMapperSSB(ssbType=ssbType, carrierFrequency = center_frequency, \n",
    "                                   isPairedBand = isPairedBand, \n",
    "                                   withSharedSpectrumChannelAccess = withSharedSpectrumChannelAccess)\n",
    "\n",
    "ssbGrid = ssbRGobject(ssb[0], ssbPositionInBurst, offsetInSubcarriers = ssbSubCarrierOffset[0],\n",
    "                      offsetInRBs = 0, numRBs = nRB)[0:14]\n",
    "fig, ax = ssbObject.displayGrid(option=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b9f84f9",
   "metadata": {},
   "source": [
    "## Construct Transmission Grid and Generate Time Domain Samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "03b6f3bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Loading SSB to Resource Grid\n",
    "numofGuardCarriers = (int((fftSize - Neff)/2), int((fftSize - Neff)/2))\n",
    "offsetToPointA     = 0\n",
    "firstSCIndex       = int(numofGuardCarriers[0] + offsetToPointA)\n",
    "numOFDMSymbols     = ssbGrid.shape[0]\n",
    "\n",
    "X = np.zeros((numOFDMSymbols, fftSize), dtype= np.complex64)\n",
    "X[:, firstSCIndex:firstSCIndex+ssbGrid.shape[-1]] = ssbGrid\n",
    "\n",
    "#__________________________________________________\n",
    "\n",
    "## OFDM Modulation at Transmitter\n",
    "#####################################\n",
    "modulator = OFDMModulator(lengthCP[1])\n",
    "x_time    = modulator(X).flatten()\n",
    "#______________________________________________________\n",
    "\n",
    "# Plot Resource Grid\n",
    "#################################################################\n",
    "fig, ax = plt.subplots()\n",
    "plt.imshow(np.abs(X), cmap = 'hot', interpolation='nearest', aspect = \"auto\")\n",
    "ax = plt.gca();\n",
    "ax.grid(color='c', linestyle='-', linewidth=1)\n",
    "ax.set_xlabel(\"Subcarrier-Index (k)\")\n",
    "ax.set_ylabel(\"OFDM Symbol Index (n)\")\n",
    "ax.set_title(\"Heat map of Transmit Grid\")\n",
    "# Gridlines based on minor ticks\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3a644e5",
   "metadata": {},
   "source": [
    "## SDR-Setup Configurations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3cdf41f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Basic SDR Setup\n",
    "sdr = adi.Pluto(\"ip:192.168.2.1\")\n",
    "sdr.sample_rate = int(sample_rate)\n",
    "\n",
    "# Config Tx\n",
    "sdr.tx_rf_bandwidth = int(sample_rate) # filter cutoff, just set it to the same as sample rate\n",
    "sdr.tx_lo           = int(center_frequency)\n",
    "sdr.tx_hardwaregain_chan0 = -0 # Increase to increase tx power, valid range is -90 to 0 dB\n",
    "\n",
    "# Config Rx\n",
    "sdr.gain_control_mode_chan0 = 'manual'\n",
    "sdr.rx_hardwaregain_chan0   = 40.0      # dB\n",
    "# The receive gain on the Pluto has a range from 0 to 74.5 dB.\n",
    "\n",
    "# sdr.gain_control_mode_chan0 = 'slow_attack'\n",
    "# # AGC modes: \n",
    "#     # 1. \"manual\"\n",
    "#     # 2. \"slow_attack\"\n",
    "#     # 3. \"fast_attack\"\n",
    "\n",
    "sdr.rx_lo           = int(center_frequency)\n",
    "sdr.rx_rf_bandwidth = int(60*10**6) # filter width, just set it to the same as sample rate for now\n",
    "sdr.rx_buffer_size  = int(buffer_size)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "135533ad",
   "metadata": {},
   "source": [
    "## Transmission: SDR RF Transmitter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "563549d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Start the transmitter\n",
    "sdr.tx_cyclic_buffer = True # Enable cyclic buffers\n",
    "# sdr.tx_cyclic_buffer = False # Enable cyclic buffers\n",
    "sdr.tx(1.3*2**17*(x_time.repeat(1))) # start transmitting\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "38c60a31-c333-49a5-8981-f225a5aed63f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "288"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lengthCP[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "faa3e3be-ff50-4e5c-879e-c291a5b87d7d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
